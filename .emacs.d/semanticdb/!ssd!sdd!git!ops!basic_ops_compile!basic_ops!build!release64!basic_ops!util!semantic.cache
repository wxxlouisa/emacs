;; Object util/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "util/"
  :tables
  (list
    (semanticdb-table "OpUtil.h"
      :major-mode 'c++-mode
      :tags 
        '( ("ISEARCH_TURING_OPUTIL_H" variable (:constant-flag t) nil [41 64])
            ("autil/Log.h" include (:system-flag t) nil [66 88])
            ("autil/MultiValueType.h" include (:system-flag t) nil [89 122])
            ("autil/StringUtil.h" include (:system-flag t) nil [123 152])
            ("tensorflow/core/framework/shape_inference.h" include nil nil [153 207])
            ("tensorflow/core/common_runtime/local_device.h" include nil nil [208 264])
            ("suez" type
               (:members 
                  ( ("turing" type
                       (:members 
                          ( ("TURING_REQ_TRUE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [311 326])
                            ("TURING_REQ_OK" variable (:constant-flag t) (reparse-symbol namespacesubparts) [800 813])
                            ("extractModelAttribute" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("input" variable
                                       (:reference 1
                                        :constant-flag t
                                        :type ("std::string" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1249 1274])
                                    ("tableName" variable
                                       (:reference 1
                                        :type ("std::string" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1275 1298])
                                    ("fieldName" variable
                                       (:reference 1
                                        :type ("std::string" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1326 1349]))                                  
                                :type "void")
                                (reparse-symbol namespacesubparts) [1222 1350])
                            ("MatchDocShapeInference" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("c" variable
                                       (:pointer 1
                                        :type ("tensorflow::shape_inference::InferenceContext" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1398 1447]))                                  
                                :type ("tensorflow::Status" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1354 1448])
                            ("ModelInputShapeInference" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("c" variable
                                       (:pointer 1
                                        :type ("tensorflow::shape_inference::InferenceContext" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1498 1547]))                                  
                                :type ("tensorflow::Status" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1452 1548])
                            ("EmbeddingShapeInference" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("c" variable
                                       (:pointer 1
                                        :type ("tensorflow::shape_inference::InferenceContext" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1597 1646]))                                  
                                :type ("tensorflow::Status" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1552 1647])
                            ("QueryInputOpV3KeyExistShapeInfer" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("c" variable
                                       (:pointer 1
                                        :type ("tensorflow::shape_inference::InferenceContext" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1710 1759]))                                  
                                :type ("tensorflow::Status" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1651 1760])
                            ("checkSparseTensor" function
                               (:prototype-flag t
                                :arguments 
                                  ( ("values" variable
                                       (:reference 1
                                        :type ("tensorflow::Tensor" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1809 1836])
                                    ("indices" variable
                                       (:reference 1
                                        :type ("tensorflow::Tensor" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1884 1912])
                                    ("denseShape" variable
                                       (:reference 1
                                        :type ("tensorflow::Tensor" type (:type "class") nil nil))
                                        (reparse-symbol arg-sub-list) [1960 1991]))                                  
                                :type ("tensorflow::Status" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [1764 1992])
                            ("GET_SESSION_RESOURCE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [2002 2022])
                            ("GET_QUERY_RESOURCE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [3000 3018]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [283 3594])
                    ("CHECK_TIMEOUT" variable (:constant-flag t) (reparse-symbol namespacesubparts) [3625 3638]))                  
                :type "namespace")
                nil [266 4117])
            ("TfType2ExprType" type
               (:template 
                  ( ("T" type (:type "class") nil nil)
                    ("bool" type nil nil nil))                  
                :type "struct"
                :members 
                  ( ("type" type
                       (:typedef ("T" type (:type "class") nil nil)
                        :type "typedef")
                        (reparse-symbol classsubparts) [4220 4235]))                  )
                nil [4138 4238])
            ("TfType2ExprType" type
               (:template 
                  ( ("bool" type nil nil nil))                  
                :type "struct"
                :members 
                  ( ("type" type
                       (:typedef ("int64_t" type (:type "class") nil nil)
                        :type "typedef")
                        (reparse-symbol classsubparts) [4341 4362]))                  
                :template-specifier 
                  ( ("tensorflow::int64" type nil nil nil)
                    ("StringToMultiChar" type nil nil nil))                  )
                nil [4240 4365])
            ("TfType2ExprType" type
               (:template 
                  ( ("bool" type nil nil nil))                  
                :type "struct"
                :members 
                  ( ("type" type
                       (:typedef ("uint64_t" type (:type "class") nil nil)
                        :type "typedef")
                        (reparse-symbol classsubparts) [4469 4491]))                  
                :template-specifier 
                  ( ("tensorflow::uint64" type nil nil nil)
                    ("StringToMultiChar" type nil nil nil))                  )
                nil [4367 4494])
            ("TfType2ExprType" type
               (:type "struct"
                :members 
                  ( ("type" type
                       (:typedef ("autil::MultiChar" type (:type "class") nil nil)
                        :type "typedef")
                        (reparse-symbol classsubparts) [4556 4586]))                  
                :template-specifier 
                  ( ("std::string" type nil nil nil)
                    ("true" type nil nil nil))                  )
                nil [4496 4589])
            ("ExprValue2TfValue" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type ("T" type (:type "class") nil nil)
                :arguments 
                  ( ("value" variable
                       (:reference 1
                        :constant-flag t
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4640 4655]))                  
                :typemodifiers ("inline"))
                nil [4591 4677])
            ("ExprValue2TfValue" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("value" variable
                       (:reference 1
                        :constant-flag t
                        :type ("autil::MultiChar" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4716 4746]))                  
                :type ("std::string" type (:type "class") nil nil))
                nil [4679 4802])
            ("convertValue" function
               (:template 
                  ( ("From" type (:type "class") nil nil)
                    ("To" type (:type "class") nil nil))                  
                :type "void"
                :arguments 
                  ( ("from" variable
                       (:reference 1
                        :constant-flag t
                        :type ("From" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4867 4884])
                    ("to" variable
                       (:reference 1
                        :type ("To" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4885 4892]))                  
                :typemodifiers ("inline"))
                nil [4804 4911])
            ("convertValue" function
               (:template 
                  ( ("From" type (:type "class") nil nil))                  
                :type "void"
                :arguments 
                  ( ("from" variable
                       (:reference 1
                        :constant-flag t
                        :type ("From" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4963 4980])
                    ("to" variable
                       (:reference 1
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4981 4997]))                  
                :typemodifiers ("inline"))
                nil [4913 5045])
            ("convertValue" function
               (:template 
                  ( ("To" type (:type "class") nil nil))                  
                :type "void"
                :arguments 
                  ( ("from" variable
                       (:reference 1
                        :constant-flag t
                        :type ("autil::MultiChar" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5095 5124])
                    ("to" variable
                       (:reference 1
                        :type ("To" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5125 5132]))                  
                :typemodifiers ("inline"))
                nil [5047 5219])
            ("convertValue" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("from" variable
                       (:reference 1
                        :constant-flag t
                        :type ("autil::MultiChar" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5246 5275])
                    ("to" variable
                       (:reference 1
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5276 5292]))                  
                :type "void")
                nil [5221 5344])
            ("CASE" variable (:constant-flag t) nil [5354 5358])
            ("gatherTensor" function
               (:template 
                  ( ("IndexType" type (:type "class") nil nil))                  
                :type ("tensorflow::Status" type (:type "class") nil nil)
                :arguments 
                  ( ("tensor" variable
                       (:reference 1
                        :constant-flag t
                        :type ("tensorflow::Tensor" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7362 7395])
                    ("index" variable (:type ("IndexType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7396 7412])
                    ("indexSize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7413 7430])
                    ("result" variable
                       (:reference 1
                        :type ("tensorflow::Tensor" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7463 7490]))                  )
                nil [7300 8509]))          
      :file "OpUtil.h"
      :pointmax 8558
      :fsize 8557
      :lastmodtime '(23355 18345 470326 924000)
      :unmatched-syntax '((thing 1959 . 1960) (thing 1958 . 1959) (thing 1952 . 1957) (thing 1883 . 1884) (thing 1882 . 1883) (thing 1876 . 1881) (thing 1808 . 1809) (thing 1807 . 1808) (thing 1801 . 1806) (thing 1763 . 1764) (thing 1762 . 1763) (thing 1709 . 1710) (thing 1708 . 1709) (thing 1650 . 1651) (thing 1649 . 1650) (thing 1596 . 1597) (thing 1595 . 1596) (thing 1551 . 1552) (thing 1550 . 1551) (thing 1497 . 1498) (thing 1496 . 1497) (thing 1451 . 1452) (thing 1450 . 1451) (thing 1397 . 1398) (thing 1396 . 1397) (thing 1353 . 1354) (thing 1352 . 1353))
      :lexical-table 
        '(("TURING_REQ_TRUE" (spp-arg-list ("expr" "status") 326 . 340) . 
              ((DO "do" 366 . 368) (semantic-list "{                                                 \\
        bool re = (expr);                                \\
        if (!re) {                                       \\
            auto s = (status);                           \\
            AUTIL_LOG(WARN, \"%s\", s.ToString().c_str()); \\
            return s;                                    \\
        }                                                \\
    }" 369 . 780) (WHILE "while" 781 . 786) (semantic-list "(0)" 787 . 790)))
          ("TURING_REQ_OK" (spp-arg-list ("status") 813 . 821) . 
              ((DO "do" 855 . 857) (semantic-list "{                                                 \\
        auto s = (status);                               \\
        if (!s.ok()) {                                   \\
            AUTIL_LOG(WARN, \"%s\", s.ToString().c_str()); \\
            return s;                                    \\
        }                                                \\
    }" 858 . 1210) (WHILE "while" 1211 . 1216) (semantic-list "(0)" 1217 . 1220)))
          ("ISEARCH_TURING_OPUTIL_H")
          ("GET_SESSION_RESOURCE" (spp-arg-list nil 2022 . 2024) . ((semantic-list "({                                                                                           \\
        auto device = dynamic_cast<tensorflow::LocalDevice *>(ctx->device());                    \\
        OP_REQUIRES(ctx, device,                                                                 \\
                    ::tensorflow::Status(tensorflow::error::UNAVAILABLE, \"not a local device\")); \\
        auto sessionResource = device->GetSessionResource();                                     \\
        OP_REQUIRES(                                                                             \\
            ctx, sessionResource,                                                                \\
            ::tensorflow::Status(tensorflow::error::UNAVAILABLE, \"SessionResource is null\"));    \\
        sessionResource;                                                                         \\
    })" 2097 . 2990)))
          ("GET_QUERY_RESOURCE" (spp-arg-list ("sessionResource") 3018 . 3035) . ((semantic-list "({                                                                                           \\
        int64_t runId = ctx->step_id();                                                          \\
        auto queryResource = sessionResource->getQueryResource(runId);                           \\
        OP_REQUIRES(ctx, queryResource, errors::Unavailable(\"invalid query resource: \", runId)); \\
        queryResource;                                                                           \\
    })" 3095 . 3592)))
          ("CHECK_TIMEOUT" (spp-arg-list ("queryResource") 3638 . 3653) . ((semantic-list "({                                                                          \\
        if (queryResource->timeoutTerminator) {                                 \\
            OP_REQUIRES(ctx, !queryResource->timeoutTerminator->checkTimeout(), \\
                        errors::Unavailable(\"query timeout.\"));                 \\
        }                                                                       \\
    })" 3703 . 4115)))
          )
))
  :file "!ssd!sdd!git!ops!basic_ops_compile!basic_ops!build!release64!basic_ops!util!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
