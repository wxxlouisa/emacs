;; Object util/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "util/"
  :tables
  (list
    (semanticdb-table "Atomic.h"
      :major-mode 'c++-mode
      :tags 
        '( ("SWIFT_ATOMIC_H" variable (:constant-flag t) nil [32 46])
            ("swift/common/Common.h" include (:system-flag t) nil [48 80])
            ("swift/common/Log.h" include (:system-flag t) nil [81 110])
            ("SWIFT_BEGIN_NAMESPACE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("util" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134 139]))                  
                :type "int")
                nil [112 140])
            ("Atomic" type
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type "class"
                :members 
                  ( ("public" label nil (reparse-symbol classsubparts) [179 186])
                    ("Atomic" function
                       (:constructor-flag t
                        :type ("Atomic" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [191 227])
                    ("public" label nil (reparse-symbol classsubparts) [228 235])
                    ("get" function (:type ("T" type (:type "class") nil nil)) (reparse-symbol classsubparts) [240 314])
                    ("getAndAdd" function
                       (:arguments 
                          ( ("x" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [332 336]))                          
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [320 393])
                    ("addAndGet" function
                       (:arguments 
                          ( ("x" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [415 419]))                          
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [403 460])
                    ("testAndDecreament" function (:type "bool") (reparse-symbol classsubparts) [466 724])
                    ("incrementAndGet" function (:type ("T" type (:type "class") nil nil)) (reparse-symbol classsubparts) [730 786])
                    ("add" function
                       (:arguments 
                          ( ("x" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [801 805]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [792 835])
                    ("increment" function (:type "void") (reparse-symbol classsubparts) [841 892])
                    ("decrementAndGet" function (:type ("T" type (:type "class") nil nil)) (reparse-symbol classsubparts) [898 955])
                    ("decrement" function (:type "void") (reparse-symbol classsubparts) [961 1008])
                    ("getAndSet" function
                       (:arguments 
                          ( ("x" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1026 1030]))                          
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1014 1091])
                    ("private" label nil (reparse-symbol classsubparts) [1092 1100])
                    ("_value" variable
                       (:typemodifiers ("volatile")
                        :type ("T" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1105 1123]))                  )
                nil [142 1126])
            ("Atomic16" type
               (:typedef ("Atomic" type
                     (:template-specifier 
                        ( ("int16_t" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :type "typedef")
                nil [1128 1161])
            ("Atomic32" type
               (:typedef ("Atomic" type
                     (:template-specifier 
                        ( ("int32_t" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :type "typedef")
                nil [1162 1195])
            ("Atomic64" type
               (:typedef ("Atomic" type
                     (:template-specifier 
                        ( ("int64_t" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :type "typedef")
                nil [1196 1229])
            ("SWIFT_TYPEDEF_PTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Atomic16" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1248 1257]))                  
                :type "int")
                nil [1230 1258])
            ("SWIFT_TYPEDEF_PTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Atomic32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1277 1286]))                  
                :type "int")
                nil [1259 1287])
            ("SWIFT_TYPEDEF_PTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Atomic64" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1306 1315]))                  
                :type "int")
                nil [1288 1316])
            ("SWIFT_END_NAMESPACE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("util" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1339 1344]))                  
                :type "int")
                nil [1319 1345]))          
      :file "Atomic.h"
      :pointmax 1371
      :fsize 1370
      :lastmodtime '(22525 42922 162558 441000)
      :unmatched-syntax nil
      :lexical-table 
        '(("SWIFT_ATOMIC_H")
          )
))
  :file "!ssd!sdd!git!ha3_rank!swift!swift!util!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
