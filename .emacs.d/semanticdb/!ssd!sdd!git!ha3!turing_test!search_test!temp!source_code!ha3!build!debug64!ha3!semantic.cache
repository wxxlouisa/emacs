;; Object ha3/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "ha3/"
  :tables
  (list
    (semanticdb-table "common.h"
      :major-mode 'c++-mode
      :tags 
        '( ("ISEARCH_COMMON_H_" variable (:constant-flag t) nil [35 52])
            ("ha3/config.h" include (:system-flag t) nil [54 77])
            ("autil/CommonMacros.h" include (:system-flag t) nil [78 109])
            ("BEGIN_HA3_NAMESPACE" variable (:constant-flag t) nil [119 138])
            ("END_HA3_NAMESPACE" variable (:constant-flag t) nil [184 201])
            ("USE_HA3_NAMESPACE" variable (:constant-flag t) nil [217 234])
            ("BEGIN_ISEARCH_NAMESPACE" variable (:constant-flag t) nil [274 297])
            ("END_ISEARCH_NAMESPACE" variable (:constant-flag t) nil [326 347])
            ("ALIAS_NAMESAPCE" variable (:constant-flag t) nil [359 374])
            ("HA3_NS" variable (:constant-flag t) nil [467 473])
            ("tr1/memory" include (:system-flag t) nil [489 510])
            ("HA3_TYPEDEF_PTR" variable (:constant-flag t) nil [519 534]))          
      :file "common.h"
      :pointmax 608
      :fsize 607
      :lastmodtime '(23220 43218 916782 5000)
      :unmatched-syntax nil
      :lexical-table 
        '(("BEGIN_ISEARCH_NAMESPACE" . 
              ((NAMESPACE "namespace" 298 . 307) (symbol "isearch" 308 . 315) (open-paren "{" 316 . 317)))
          ("USE_HA3_NAMESPACE" (spp-arg-list ("x") 234 . 237) . 
              ((USING "using" 238 . 243) (NAMESPACE "namespace" 244 . 253) (symbol "isearch" 254 . 261) (punctuation ":" 261 . 262) (punctuation ":" 262 . 263) (symbol "x" 263 . 264)))
          ("END_ISEARCH_NAMESPACE" . ((close-paren "}" 348 . 349)))
          ("ISEARCH_COMMON_H_")
          ("BEGIN_HA3_NAMESPACE" (spp-arg-list ("x") 138 . 141) . 
              ((NAMESPACE "namespace" 142 . 151) (symbol "isearch" 152 . 159) (open-paren "{" 160 . 161) (NAMESPACE "namespace" 162 . 171) (symbol "x" 172 . 173) (open-paren "{" 174 . 175)))
          ("ALIAS_NAMESAPCE" (spp-arg-list ("x" "y") 374 . 380) . 
              ((NAMESPACE "namespace" 381 . 390) (symbol "isearch" 391 . 398) (semantic-list "{ namespace x = y; }" 399 . 419)))
          ("HA3_TYPEDEF_PTR" (spp-arg-list ("x") 534 . 537) . 
              ((TYPEDEF "typedef" 538 . 545) (symbol "std" 546 . 549) (punctuation ":" 549 . 550) (punctuation ":" 550 . 551) (symbol "tr1" 551 . 554) (punctuation ":" 554 . 555) (punctuation ":" 555 . 556) (symbol "shared_ptr" 556 . 566) (punctuation "<" 566 . 567) (symbol "x" 567 . 568) (punctuation ">" 568 . 569) (spp-symbol-merge ((symbol "x" 570 . 571) (symbol "Ptr" 573 . 576)) 570 . 576) (punctuation ";" 576 . 577)))
          ("END_HA3_NAMESPACE" (spp-arg-list ("x") 201 . 204) . ((close-paren "}" 205 . 206) (close-paren "}" 207 . 208)))
          ("HA3_NS" (spp-arg-list ("x") 473 . 476) . 
              ((symbol "isearch" 477 . 484) (punctuation ":" 484 . 485) (punctuation ":" 485 . 486) (symbol "x" 486 . 487)))
          )
)
    (semanticdb-table "isearch.h"
      :major-mode 'c++-mode
      :tags 
        '( ("ISEARCH_H_" variable (:constant-flag t) nil [28 38])
            ("stdint.h" include (:system-flag t) nil [40 59])
            ("map" include (:system-flag t) nil [60 74])
            ("string" include (:system-flag t) nil [75 92])
            ("indexlib/indexlib.h" include (:system-flag t) nil [93 123])
            ("tr1/memory" include (:system-flag t) nil [124 145])
            ("autil/LongHashValue.h" include (:system-flag t) nil [146 178])
            ("ha3/config.h" include (:system-flag t) nil [179 202])
            ("matchdoc/ValueType.h" include (:system-flag t) nil [203 234])
            ("primarykey_t" type
               (:typedef ("autil::uint128_t" type (:type "class") nil nil)
                :type "typedef")
                nil [236 274])
            ("fieldboost_t" type
               (:typedef ("int32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [276 305])
            ("fieldbitmap_t" type
               (:typedef ("uint32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [307 338])
            ("INVALID_FIELDBITMAP" variable
               (:constant-flag t
                :default-value "(fieldbitmap_t)0xFFFFFFFF"
                :type ("fieldbitmap_t" type (:type "class") nil nil))
                nil [339 407])
            ("score_t" type
               (:typedef ("double")
                :type "typedef")
                nil [409 432])
            ("operation_id_t" type
               (:typedef ("int64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [434 465])
            ("FullIndexVersion" type
               (:typedef ("uint32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [466 500])
            ("quota_t" type
               (:typedef ("uint32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [501 526])
            ("INVALID_OPERATION_ID" variable
               (:constant-flag t
                :default-value "-1"
                :type ("operation_id_t" type (:type "class") nil nil))
                nil [528 575])
            ("END_DOCID" variable (:constant-flag t) nil [585 594])
            ("MAX_QUOTA" variable (:constant-flag t) nil [625 634])
            ("UNINITIALIZED_DOCID" variable (:constant-flag t) nil [657 676])
            ("VariableType" type
               (:typedef ("matchdoc::BuiltinType" type (:type "class") nil nil)
                :type "typedef")
                nil [692 735])
            ("TYPE_CONVERT_HELPER" variable (:constant-flag t) nil [745 764])
            ("matchdoc::bt_unknown" variable (:type "int") nil [881 909])
            ("matchdoc::bt_int8" variable (:type "int") nil [911 936])
            ("matchdoc::bt_int16" variable (:type "int") nil [938 964])
            ("matchdoc::bt_int32" variable (:type "int") nil [966 992])
            ("matchdoc::bt_int64" variable (:type "int") nil [994 1020])
            ("matchdoc::bt_uint8" variable (:type "int") nil [1022 1048])
            ("matchdoc::bt_uint16" variable (:type "int") nil [1050 1077])
            ("matchdoc::bt_uint32" variable (:type "int") nil [1079 1106])
            ("matchdoc::bt_uint64" variable (:type "int") nil [1108 1135])
            ("matchdoc::bt_float" variable (:type "int") nil [1137 1163])
            ("matchdoc::bt_double" variable (:type "int") nil [1165 1192])
            ("matchdoc::bt_string" variable (:type "int") nil [1194 1221])
            ("matchdoc::bt_bool" variable (:type "int") nil [1223 1248])
            ("matchdoc::bt_hash_128" variable (:type "int") nil [1250 1279])
            ("matchdoc::bt_max" variable (:type "int") nil [1333 1350])
            ("matchdoc::bt_user_type1" variable (:type "int") nil [1405 1429])
            ("VRGroupKey" type
               (:members 
                  ( ("FOR_DISTINCT" variable
                       (:constant-flag t
                        :default-value (1470 1471)
                        :type "int")
                        (reparse-symbol enumsubparts) [1481 1497])
                    ("FOR_ATTRIBUTE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1546 1560])
                    ("FOR_USER_DATA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1609 1623]))                  
                :type "enum")
                nil [1459 1670])
            ("QueryTermType" type
               (:members 
                  ( ("AND_TERM" variable
                       (:constant-flag t
                        :default-value (1682 1683)
                        :type "int")
                        (reparse-symbol enumsubparts) [1697 1709])
                    ("OR_TERM" variable
                       (:constant-flag t
                        :default-value (1699 1700)
                        :type "int")
                        (reparse-symbol enumsubparts) [1715 1726])
                    ("ANDNOT_TERM" variable
                       (:constant-flag t
                        :default-value (1720 1721)
                        :type "int")
                        (reparse-symbol enumsubparts) [1732 1747])
                    ("RANK_TERM" variable
                       (:constant-flag t
                        :default-value (1739 1740)
                        :type "int")
                        (reparse-symbol enumsubparts) [1753 1766]))                  
                :type "enum")
                nil [1672 1770])
            ("JoinType" type
               (:members 
                  ( ("DEFAULT_JOIN" variable
                       (:constant-flag t
                        :default-value (1781 1782)
                        :type "int")
                        (reparse-symbol enumsubparts) [1792 1808])
                    ("WEAK_JOIN" variable
                       (:constant-flag t
                        :default-value (1800 1801)
                        :type "int")
                        (reparse-symbol enumsubparts) [1814 1827])
                    ("STRONG_JOIN" variable
                       (:constant-flag t
                        :default-value (1821 1822)
                        :type "int")
                        (reparse-symbol enumsubparts) [1833 1848]))                  
                :type "enum")
                nil [1772 1851])
            ("SubDocDisplayType" type
               (:members 
                  ( ("SUB_DOC_DISPLAY_NO" variable
                       (:constant-flag t
                        :default-value (1877 1878)
                        :type "int")
                        (reparse-symbol enumsubparts) [1882 1904])
                    ("SUB_DOC_DISPLAY_FLAT" variable
                       (:constant-flag t
                        :default-value (1907 1908)
                        :type "int")
                        (reparse-symbol enumsubparts) [1910 1934])
                    ("SUB_DOC_DISPLAY_GROUP" variable
                       (:constant-flag t
                        :default-value (1938 1939)
                        :type "int")
                        (reparse-symbol enumsubparts) [1940 1965]))                  
                :type "enum")
                nil [1853 1968])
            ("TermType" type
               (:members 
                  ( ("TT_STRING" variable
                       (:constant-flag t
                        :default-value (1976 1977)
                        :type "int")
                        (reparse-symbol enumsubparts) [1990 2003])
                    ("TT_NUMBER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2009 2020]))                  
                :type "enum")
                nil [1970 2021])
            ("QueryType" type
               (:members 
                  ( ("TERM_QUERY" variable
                       (:constant-flag t
                        :default-value (2031 2032)
                        :type "int")
                        (reparse-symbol enumsubparts) [2044 2058])
                    ("NUMBER_QUERY" variable
                       (:constant-flag t
                        :default-value (2053 2054)
                        :type "int")
                        (reparse-symbol enumsubparts) [2064 2080])
                    ("PHRASE_QUERY" variable
                       (:constant-flag t
                        :default-value (2075 2076)
                        :type "int")
                        (reparse-symbol enumsubparts) [2086 2102])
                    ("AND_QUERY" variable
                       (:constant-flag t
                        :default-value (2094 2095)
                        :type "int")
                        (reparse-symbol enumsubparts) [2108 2121])
                    ("OR_QUERY" variable
                       (:constant-flag t
                        :default-value (2112 2113)
                        :type "int")
                        (reparse-symbol enumsubparts) [2127 2139])
                    ("RANK_QUERY" variable
                       (:constant-flag t
                        :default-value (2132 2133)
                        :type "int")
                        (reparse-symbol enumsubparts) [2145 2159])
                    ("ANDNOT_QUERY" variable
                       (:constant-flag t
                        :default-value (2154 2155)
                        :type "int")
                        (reparse-symbol enumsubparts) [2165 2181])
                    ("MULTI_TERM_QUERY" variable
                       (:constant-flag t
                        :default-value (2180 2181)
                        :type "int")
                        (reparse-symbol enumsubparts) [2187 2207]))                  
                :type "enum")
                nil [2023 2211])
            ("MatchDataLevel" type
               (:members 
                  ( ("MDL_NONE" variable
                       (:constant-flag t
                        :default-value (2224 2225)
                        :type "int")
                        (reparse-symbol enumsubparts) [2239 2251])
                    ("MDL_TERM" variable
                       (:constant-flag t
                        :default-value (2242 2243)
                        :type "int")
                        (reparse-symbol enumsubparts) [2257 2269])
                    ("MDL_SUB_QUERY" variable
                       (:constant-flag t
                        :default-value (2265 2266)
                        :type "int")
                        (reparse-symbol enumsubparts) [2275 2292]))                  
                :type "enum")
                nil [2213 2296])
            ("SyntaxExprType" type
               (:members 
                  ( ("SYNTAX_EXPR_TYPE_UNKNOWN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2324 2349])
                    ("SYNTAX_EXPR_TYPE_CONST_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2354 2383])
                    ("SYNTAX_EXPR_TYPE_ATOMIC_ATTR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2388 2417])
                    ("SYNTAX_EXPR_TYPE_VIRTUAL_ATTR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2422 2452])
                    ("SYNTAX_EXPR_TYPE_MINUS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2457 2480])
                    ("SYNTAX_EXPR_TYPE_ADD" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2485 2506])
                    ("SYNTAX_EXPR_TYPE_DIV" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2511 2532])
                    ("SYNTAX_EXPR_TYPE_MUL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2537 2558])
                    ("SYNTAX_EXPR_TYPE_EQUAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2563 2586])
                    ("SYNTAX_EXPR_TYPE_NOTEQUAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2591 2617])
                    ("SYNTAX_EXPR_TYPE_LESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2622 2644])
                    ("SYNTAX_EXPR_TYPE_GREATERTHAN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2649 2678])
                    ("SYNTAX_EXPR_TYPE_LESSEQUAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2683 2710])
                    ("SYNTAX_EXPR_TYPE_GREATEREQUAL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2715 2745])
                    ("SYNTAX_EXPR_TYPE_AND" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2750 2771])
                    ("SYNTAX_EXPR_TYPE_OR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2776 2796])
                    ("SYNTAX_EXPR_TYPE_RANK" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2801 2823])
                    ("SYNTAX_EXPR_TYPE_BITAND" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2828 2852])
                    ("SYNTAX_EXPR_TYPE_BITOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2857 2880])
                    ("SYNTAX_EXPR_TYPE_BITXOR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2885 2909])
                    ("SYNTAX_EXPR_TYPE_FUNC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2914 2936])
                    ("SYNTAX_EXPR_TYPE_FUNC_ARGUMENT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2941 2972]))                  
                :type "enum")
                nil [2298 2975])
            ("AtomicSyntaxExprType" type
               (:members 
                  ( ("UNKNOWN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3009 3017])
                    ("INTEGER_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3022 3036])
                    ("FLOAT_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3041 3053])
                    ("STRING_VALUE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3058 3071])
                    ("ATTRIBUTE_NAME" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3076 3091]))                  
                :type "enum")
                nil [2977 3094])
            ("FuncActionScopeType" type
               (:members 
                  ( ("FUNC_ACTION_SCOPE_MAIN_DOC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3127 3154])
                    ("FUNC_ACTION_SCOPE_SUB_DOC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3159 3185])
                    ("FUNC_ACTION_SCOPE_ADAPTER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3190 3216]))                  
                :type "enum")
                nil [3096 3219])
            ("HaCompressType" type
               (:members 
                  ( ("INVALID_COMPRESS_TYPE" variable
                       (:constant-flag t
                        :default-value (3245 3246)
                        :type "int")
                        (reparse-symbol enumsubparts) [3247 3272])
                    ("NO_COMPRESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3278 3290])
                    ("Z_SPEED_COMPRESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3295 3312])
                    ("Z_DEFAULT_COMPRESS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3317 3336])
                    ("SNAPPY" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3341 3348])
                    ("LZ4" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3353 3357]))                  
                :type "enum")
                nil [3221 3360])
            ("QueryOperator" type
               (:members 
                  ( ("OP_UNKNOWN" variable
                       (:constant-flag t
                        :default-value (3374 3375)
                        :type "int")
                        (reparse-symbol enumsubparts) [3387 3401])
                    ("OP_AND" variable
                       (:constant-flag t
                        :default-value (3390 3391)
                        :type "int")
                        (reparse-symbol enumsubparts) [3407 3417])
                    ("OP_OR" variable
                       (:constant-flag t
                        :default-value (3405 3406)
                        :type "int")
                        (reparse-symbol enumsubparts) [3423 3432])
                    ("OP_WEAKAND" variable
                       (:constant-flag t
                        :default-value (3425 3426)
                        :type "int")
                        (reparse-symbol enumsubparts) [3438 3452]))                  
                :type "enum")
                nil [3362 3456])
            ("ResultFormatType" type
               (:members 
                  ( ("RF_UNKNOWN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3486 3497])
                    ("RF_XML" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3502 3509])
                    ("RF_PROTOBUF" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3514 3527]))                  
                :type "enum")
                nil [3458 3528])
            ("FetchSummaryType" type
               (:members 
                  ( ("BY_UNKNOWN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3558 3569])
                    ("BY_DOCID" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3574 3583])
                    ("BY_PK" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3588 3594])
                    ("BY_RAWPK" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3599 3609]))                  
                :type "enum")
                nil [3530 3610])
            ("QuotaMode" type
               (:members 
                  ( ("QM_PER_DOC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3633 3644])
                    ("QM_PER_LAYER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3649 3662])
                    ("QM_UNKNOWN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3667 3678]))                  
                :type "enum")
                nil [3612 3681])
            ("QuotaType" type
               (:members 
                  ( ("QT_PROPOTION" variable
                       (:constant-flag t
                        :default-value (3693 3694)
                        :type "int")
                        (reparse-symbol enumsubparts) [3704 3720])
                    ("QT_AVERAGE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3773 3784])
                    ("QT_QUOTA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3800 3809])
                    ("QT_UNKNOW" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3814 3825]))                  
                :type "enum")
                nil [3683 3826])
            ("DispatchType" type
               (:members 
                  ( ("DISPATCH_BY_PARTITION" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3852 3874])
                    ("DISPATCH_BY_REPLICA" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3879 3900]))                  
                :type "enum")
                nil [3828 3901])
            ("MergeInStep" type
               (:members 
                  ( ("MERGE_IN_STEP_FULL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3925 3944])
                    ("MERGE_IN_STEP_BEGIN" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3949 3969])
                    ("MERGE_IN_STEP_DOING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3974 3994])
                    ("MERGE_IN_STEP_END" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [3999 4018]))                  
                :type "enum")
                nil [3903 4019])
            ("SEARCH_PHASE_ONE" variable
               (:constant-flag t
                :default-value "1"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [4020 4056])
            ("SEARCH_PHASE_TWO" variable
               (:constant-flag t
                :default-value "2"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [4057 4093])
            ("KeyValueMap" type
               (:typedef ("std::map" type
                     (:template-specifier 
                        ( ("std::string" type nil nil nil)
                          ("std::string" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :type "typedef")
                nil [4095 4150])
            ("getValueFromKeyValueMap" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("keyValueMap" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::map" type
                             (:template-specifier 
                                ( ("std::string" type nil nil nil)
                                  ("std::string" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4203 4257])
                    ("key" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4266 4289])
                    ("defaultValue" variable
                       (:reference 1
                        :constant-flag t
                        :default-value "\"\""
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4298 4334]))                  
                :type ("std::string" type (:type "class") nil nil))
                nil [4151 4498])
            ("MAX_AGGREGATE_GROUP_COUNT" variable
               (:constant-flag t
                :default-value "1000"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [4500 4548])
            ("DOCID_PARTITION_MODE" variable (:constant-flag t) nil [4558 4578])
            ("NULL_CLUSTER" variable (:constant-flag t) nil [4595 4607])
            ("BuildMode" type
               (:typedef ("std::string" type (:type "class") nil nil)
                :type "typedef")
                nil [4627 4657])
            ("BuildPhase" type
               (:typedef ("std::string" type (:type "class") nil nil)
                :type "typedef")
                nil [4658 4689])
            ("hashid_t" type
               (:typedef ("uint16_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4751 4777])
            ("clusterid_t" type
               (:typedef ("uint16_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4778 4807])
            ("INVALID_CLUSTERID" variable
               (:constant-flag t
                :default-value "(clusterid_t)-1"
                :type ("clusterid_t" type (:type "class") nil nil))
                nil [4808 4862])
            ("DEFAULT_BOOST_VALUE" variable
               (:constant-flag t
                :default-value "100"
                :type ("int32_t" type (:type "class") nil nil))
                nil [4864 4904])
            ("MAX_RERANK_SIZE" variable
               (:constant-flag t
                :default-value "1000000"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [4905 4946])
            ("MIN_INDEX_SWITCH_LIMIT" variable
               (:constant-flag t
                :default-value "150"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [4947 4991])
            ("NULL_STRING" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5054 5096])
            ("DYNAMIC_CUT_SEPARATOR" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"\\x1B\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5097 5153])
            ("LAYERKEY_DOCID" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%docid\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5154 5205])
            ("LAYERKEY_OTHER" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%other\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5206 5257])
            ("LAYERKEY_SEGMENTID" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%segmentid\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5258 5317])
            ("LAYERKEY_PERCENT" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%percent\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5318 5373])
            ("LAYERKEY_UNSORTED" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%unsorted\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5374 5431])
            ("LAYERKEY_SORTED" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"%sorted\""
                :type ("std::string" type (:type "class") nil nil))
                nil [5432 5485])
            ("PLUGIN_PATH_NAME" variable (:constant-flag t) nil [5496 5512])
            ("DEFAULT_QRS_CHAIN" variable (:constant-flag t) nil [5533 5550])
            ("DEFAULT_DEBUG_QRS_CHAIN" variable (:constant-flag t) nil [5569 5592])
            ("DEFAULT_DEBUG_PROCESSOR" variable (:constant-flag t) nil [5639 5662])
            ("DEFAULT_DEBUG_RANK_PROFILE" variable (:constant-flag t) nil [5704 5730])
            ("DEFAULT_DEBUG_SCORER" variable (:constant-flag t) nil [5780 5800])
            ("DEFAULT_RANK_PROFILE" variable (:constant-flag t) nil [5842 5862])
            ("DEFAULT_SUMMARY_PROFILE" variable (:constant-flag t) nil [5889 5912])
            ("DEFAULT_CONFIG_DIR" variable (:constant-flag t) nil [5938 5956])
            ("LOCAL_URI_PREFIX" variable (:constant-flag t) nil [5981 5997])
            ("FETCHSUMMARY_GID_SEPERATOR" variable (:constant-flag t) nil [6017 6043])
            ("FETCHSUMMARY_GID_SEPERATOR_DEPRECATED" variable (:constant-flag t) nil [6056 6093])
            ("BUILD_IN_REFERENCE_PREFIX" variable (:constant-flag t) nil [6107 6132])
            ("PROVIDER_VAR_NAME_PREFIX" variable (:constant-flag t) nil [6156 6180])
            ("BUILD_IN_JOIN_DOCID_REF_PREIX" variable (:constant-flag t) nil [6205 6234])
            ("BUILD_IN_JOIN_DOCID_VIRTUAL_ATTR_NAME_PREFIX" variable (:constant-flag t) nil [6260 6304])
            ("BUILD_IN_SUBJOIN_DOCID_VIRTUAL_ATTR_NAME_PREFIX" variable (:constant-flag t) nil [6330 6377])
            ("STATUS_CHECK_PREFIX" variable (:constant-flag t) nil [6406 6425])
            ("HTTP_SUPPORT_PREFIX" variable (:constant-flag t) nil [6443 6462])
            ("LIST_CMD" variable (:constant-flag t) nil [6486 6494])
            ("GET_FILE_CONTENT_CMD" variable (:constant-flag t) nil [6508 6528])
            ("RESULT_FORMAT_XML" variable (:constant-flag t) nil [6545 6562])
            ("RESULT_FORMAT_PROTOBUF" variable (:constant-flag t) nil [6577 6599])
            ("LOCAL_USER_NAME_DEFAULT" variable (:constant-flag t) nil [6620 6643])
            ("LOCAL_SERVICE_NAME_DEFAULT" variable (:constant-flag t) nil [6657 6683])
            ("HEART_BEAT_META_INFO_KEY" variable (:constant-flag t) nil [6709 6733])
            ("HEART_BEAT_CLUSTER_NAME" variable (:constant-flag t) nil [6755 6778])
            ("RAW_DOCUMENT_FORMAT_HA3" variable (:constant-flag t) nil [6839 6862])
            ("RAW_DOCUMENT_FORMAT_ISEARCH" variable (:constant-flag t) nil [6877 6904])
            ("FSUTIL_BINARY" variable (:constant-flag t) nil [6924 6937])
            ("MAX_PARTITION_RANGE" variable
               (:constant-flag t
                :default-value "65535"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [6953 6996])
            ("MAX_PARTITION_COUNT" variable
               (:constant-flag t
                :default-value "MAX_PARTITION_RANGE + 1"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [6997 7058])
            ("KEEP_INCREMENTAL_VERSION_COUNT" variable
               (:constant-flag t
                :default-value "10"
                :type ("int32_t" type (:type "class") nil nil))
                nil [7456 7506])
            ("APP_ITERATOR_INTERVAL" variable
               (:constant-flag t
                :default-value "100 * 1000"
                :type ("int64_t" type (:type "class") nil nil))
                nil [7507 7556])
            ("BUILDER_MONITOR_INTERVAL" variable
               (:constant-flag t
                :default-value "500 * 1000"
                :type ("int64_t" type (:type "class") nil nil))
                nil [7629 7681])
            ("LOCAL_BUILDER_METRICS_STDOUT_COUNT" variable
               (:constant-flag t
                :default-value "10"
                :type ("int32_t" type (:type "class") nil nil))
                nil [7690 7744])
            ("SERVER_TIMEOUT" variable
               (:constant-flag t
                :default-value "5 * 1000"
                :type ("int32_t" type (:type "class") nil nil))
                nil [7843 7883])
            ("FETCHSUMMARY_GID_FIELD_SIZE" variable
               (:constant-flag t
                :default-value "5"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [7891 7938])
            ("STATUS_CHECK_PREFIX_LEN" variable
               (:constant-flag t
                :default-value "6"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [7939 7982])
            ("HTTP_SUPPORT_PREFIX_LEN" variable
               (:constant-flag t
                :default-value "12"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [7983 8027])
            ("GET_FILE_SIZE_LIMIT" variable
               (:constant-flag t
                :default-value "100 * 1024"
                :type ("int64_t" type (:type "class") nil nil))
                nil [8028 8075])
            ("DEFAULT_WORKER_RESOURCE" variable
               (:constant-flag t
                :default-value "100"
                :type "int")
                nil [8085 8125])
            ("DEFAULT_PARTITION_RESOURCE" variable
               (:constant-flag t
                :default-value "DEFAULT_WORKER_RESOURCE"
                :type "int")
                nil [8126 8189])
            ("HA3_REQUEST_VERSION" variable (:type "int") nil [8667 8687])
            ("DEFAULT_AMON_AGENT_PORT" variable
               (:constant-flag t
                :default-value "10086"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [8750 8797])
            ("INVALID_SEARCHER_CACHE_EXPIRE_TIME" variable
               (:constant-flag t
                :default-value "uint32_t(-1)"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [8799 8864])
            ("REALTIME_UNLIMIT_QPS" variable
               (:constant-flag t
                :default-value "0"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [8866 8906])
            ("DEFAULT_WORKER_CAPABILITY" variable
               (:constant-flag t
                :default-value "16"
                :type ("uint32_t" type (:type "class") nil nil))
                nil [8907 8953])
            ("HA3_VERSION" variable (:type "int") nil [9018 9030])
            ("DEFAULT_TASK_QUEUE_NAME" variable
               (:constant-flag t
                :default-value "\"__ha3_runtime_default_task_queue\""
                :type ("std::string" type (:type "class") nil nil))
                nil [9031 9110])
            ("HA3_EMPTY_STRING" variable
               (:constant-flag t
                :default-value "\"\""
                :type ("std::string" type (:type "class") nil nil))
                nil [9112 9152])
            ("ONLINE_CONFIG_KEEP_COUNT" variable
               (:constant-flag t
                :default-value "5"
                :type "int")
                nil [9154 9193]))          
      :file "isearch.h"
      :pointmax 9271
      :fsize 9270
      :lastmodtime '(23235 19206 474544 519000)
      :unmatched-syntax '((thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1351 . 1351) (thing 1331 . 1332) (thing 1331 . 1332) (thing 1331 . 1332) (thing 1331 . 1332) (thing 1317 . 1330) (thing 1317 . 1330) (thing 1317 . 1330) (thing 1317 . 1330) (thing 1305 . 1316) (thing 1305 . 1316) (thing 1305 . 1316) (thing 1305 . 1316) (thing 1304 . 1305) (thing 1304 . 1305) (thing 1304 . 1305) (thing 1304 . 1305) (thing 1303 . 1304) (thing 1303 . 1304) (thing 1303 . 1304) (thing 1303 . 1304) (thing 1295 . 1303) (thing 1295 . 1303) (thing 1295 . 1303) (thing 1295 . 1303) (thing 1289 . 1294) (thing 1289 . 1294) (thing 1289 . 1294) (thing 1289 . 1294) (thing 1282 . 1288) (thing 1282 . 1288) (thing 1282 . 1288) (thing 1282 . 1288) (thing 1279 . 1280) (thing 1279 . 1280) (thing 1279 . 1280) (thing 1279 . 1280) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1250 . 1279) (thing 1248 . 1249) (thing 1248 . 1249) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1223 . 1248) (thing 1221 . 1222) (thing 1221 . 1222) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1194 . 1221) (thing 1192 . 1193) (thing 1192 . 1193) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1165 . 1192) (thing 1163 . 1164) (thing 1163 . 1164) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1137 . 1163) (thing 1135 . 1136) (thing 1135 . 1136) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1108 . 1135) (thing 1106 . 1107) (thing 1106 . 1107) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1079 . 1106) (thing 1077 . 1078) (thing 1077 . 1078) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1050 . 1077) (thing 1048 . 1049) (thing 1048 . 1049) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1022 . 1048) (thing 1020 . 1021) (thing 1020 . 1021) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 994 . 1020) (thing 992 . 993) (thing 992 . 993) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 966 . 992) (thing 964 . 965) (thing 964 . 965) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 938 . 964) (thing 936 . 937) (thing 936 . 937) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 911 . 936) (thing 909 . 910) (thing 909 . 910) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 881 . 909) (thing 4939 . 4944) (thing 4945 . 4953) (thing 4954 . 4980) (thing 4981 . 4982) (thing 4983 . 4984) (thing 4985 . 4986) (thing 4987 . 4991) (thing 4992 . 4993) (thing 4992 . 4997) (thing 4994 . 4998) (thing 4998 . 4999) (thing 4998 . 5006) (thing 5007 . 5033) (thing 5034 . 5035) (thing 5036 . 5037) (thing 5038 . 5039) (thing 5040 . 5044) (thing 5045 . 5046) (thing 5047 . 5051) (thing 5051 . 5052) (thing 7006 . 7011) (thing 7012 . 7019) (thing 7020 . 7049) (thing 7050 . 7051) (thing 7052 . 7053) (thing 7054 . 7055) (thing 7056 . 7060) (thing 7059 . 7064) (thing 7061 . 7062) (thing 7063 . 7067) (thing 7065 . 7072) (thing 7067 . 7068) (thing 7073 . 7102) (thing 7075 . 7080) (thing 7081 . 7088) (thing 7089 . 7112) (thing 7103 . 7104) (thing 7105 . 7106) (thing 7107 . 7108) (thing 7109 . 7113) (thing 7113 . 7114) (thing 7114 . 7115) (thing 7115 . 7117) (thing 7116 . 7120) (thing 7118 . 7119) (thing 7120 . 7124) (thing 7120 . 7121) (thing 7125 . 7126) (thing 7127 . 7131) (thing 7128 . 7133) (thing 7131 . 7132) (thing 7134 . 7141) (thing 7140 . 7145) (thing 7142 . 7165) (thing 7146 . 7153) (thing 7154 . 7176) (thing 7166 . 7167) (thing 7168 . 7170) (thing 7171 . 7172) (thing 7173 . 7177) (thing 7177 . 7178) (thing 7178 . 7179) (thing 7179 . 7180) (thing 7180 . 7184) (thing 7181 . 7182) (thing 7183 . 7187) (thing 7184 . 7185) (thing 7188 . 7189) (thing 7190 . 7194) (thing 7193 . 7198) (thing 7194 . 7195) (thing 7199 . 7206) (thing 7202 . 7207) (thing 7207 . 7229) (thing 7208 . 7215) (thing 7216 . 7247) (thing 7230 . 7231) (thing 7232 . 7233) (thing 7234 . 7235) (thing 7236 . 7240) (thing 7241 . 7242) (thing 7243 . 7247) (thing 7247 . 7248) (thing 7248 . 7249) (thing 7250 . 7251) (thing 7252 . 7253) (thing 7254 . 7258) (thing 7255 . 7260) (thing 7259 . 7260) (thing 7261 . 7265) (thing 7261 . 7268) (thing 7265 . 7266) (thing 7269 . 7300) (thing 7273 . 7278) (thing 7279 . 7286) (thing 7287 . 7318) (thing 7301 . 7302) (thing 7303 . 7304) (thing 7305 . 7306) (thing 7307 . 7311) (thing 7312 . 7313) (thing 7314 . 7318) (thing 7318 . 7319) (thing 7319 . 7320) (thing 7321 . 7322) (thing 7323 . 7324) (thing 7325 . 7329) (thing 7326 . 7331) (thing 7330 . 7331) (thing 7332 . 7336) (thing 7332 . 7339) (thing 7336 . 7337) (thing 7340 . 7371) (thing 7344 . 7349) (thing 7350 . 7357) (thing 7358 . 7377) (thing 7372 . 7373) (thing 7374 . 7375) (thing 7376 . 7377) (thing 7378 . 7379) (thing 7378 . 7382) (thing 7380 . 7381) (thing 7382 . 7383) (thing 7383 . 7384) (thing 7384 . 7388) (thing 7385 . 7389) (thing 7389 . 7390) (thing 7389 . 7390) (thing 7391 . 7395) (thing 7395 . 7396) (thing 7397 . 7402) (thing 7403 . 7410) (thing 7411 . 7430) (thing 7431 . 7432) (thing 7433 . 7434) (thing 7435 . 7436) (thing 7437 . 7441) (thing 7442 . 7443) (thing 7444 . 7448) (thing 7448 . 7449) (thing 7513 . 7518) (thing 7519 . 7526) (thing 7527 . 7550) (thing 7551 . 7552) (thing 7553 . 7554) (thing 7555 . 7556) (thing 7557 . 7561) (thing 7562 . 7563) (thing 7564 . 7568) (thing 7566 . 7571) (thing 7568 . 7569) (thing 7572 . 7579) (thing 7580 . 7603) (thing 7604 . 7605) (thing 7606 . 7607) (thing 7608 . 7609) (thing 7610 . 7614) (thing 7615 . 7616) (thing 7617 . 7621) (thing 7621 . 7622) (thing 7726 . 7731) (thing 7732 . 7739) (thing 7740 . 7760) (thing 7761 . 7762) (thing 7763 . 7766) (thing 7767 . 7768) (thing 7769 . 7773) (thing 7774 . 7775) (thing 7776 . 7780) (thing 7779 . 7784) (thing 7780 . 7781) (thing 7785 . 7792) (thing 7793 . 7813) (thing 7814 . 7815) (thing 7816 . 7819) (thing 7820 . 7821) (thing 7822 . 7826) (thing 7827 . 7828) (thing 7829 . 7833) (thing 7833 . 7834) (thing 8137 . 8142) (thing 8143 . 8150) (thing 8151 . 8175) (thing 8176 . 8177) (thing 8178 . 8179) (thing 8180 . 8181) (thing 8182 . 8186) (thing 8187 . 8188) (thing 8189 . 8193) (thing 8190 . 8195) (thing 8193 . 8194) (thing 8196 . 8203) (thing 8202 . 8207) (thing 8204 . 8228) (thing 8208 . 8215) (thing 8216 . 8242) (thing 8229 . 8230) (thing 8231 . 8232) (thing 8233 . 8234) (thing 8235 . 8239) (thing 8240 . 8241) (thing 8242 . 8246) (thing 8243 . 8244) (thing 8245 . 8262) (thing 8246 . 8247) (thing 8255 . 8260) (thing 8261 . 8268) (thing 8263 . 8264) (thing 8265 . 8272) (thing 8269 . 8295) (thing 8296 . 8297) (thing 8298 . 8315) (thing 8316 . 8317) (thing 8316 . 8317) (thing 8318 . 8335) (thing 8318 . 8325) (thing 8336 . 8337) (thing 8338 . 8343) (thing 8369 . 8370) (thing 8371 . 8388) (thing 8387 . 8388) (thing 8389 . 8406) (thing 8389 . 8390) (thing 8391 . 8396) (thing 8407 . 8408) (thing 8409 . 8412) (thing 8440 . 8441) (thing 8442 . 8459) (thing 8456 . 8457) (thing 8458 . 8459) (thing 8459 . 8460) (thing 8460 . 8461) (thing 8462 . 8465) (thing 8509 . 8510) (thing 8511 . 8512) (thing 8512 . 8513) (thing 8517 . 8522) (thing 8523 . 8530) (thing 8531 . 8553) (thing 8554 . 8555) (thing 8556 . 8582) (thing 8570 . 8575) (thing 8576 . 8583) (thing 8583 . 8584) (thing 8584 . 8606) (thing 8585 . 8611) (thing 8607 . 8608) (thing 8609 . 8635) (thing 8612 . 8613) (thing 8636 . 8637) (thing 8638 . 8664) (thing 8665 . 8666) (thing 8902 . 8907) (thing 8908 . 8911) (thing 8911 . 8912) (thing 8912 . 8913) (thing 8913 . 8919) (thing 8920 . 8939) (thing 8940 . 8941) (thing 8942 . 8964) (thing 8955 . 8960) (thing 8961 . 8964) (thing 8964 . 8965) (thing 8965 . 8966) (thing 8966 . 8972) (thing 8973 . 8992) (thing 8993 . 8994) (thing 8995 . 9017) (thing 9141 . 9146) (thing 9147 . 9154) (thing 9155 . 9183) (thing 9184 . 9185) (thing 9186 . 9188) (thing 9189 . 9190) (thing 9191 . 9195) (thing 9194 . 9199) (thing 9196 . 9197) (thing 9198 . 9202) (thing 9200 . 9207) (thing 9202 . 9203) (thing 9208 . 9236) (thing 9237 . 9238) (thing 9239 . 9241) (thing 9242 . 9243) (thing 9244 . 9248) (thing 9249 . 9250) (thing 9251 . 9255) (thing 9255 . 9256))
      :lexical-table 
        '(("END_DOCID" . ((semantic-list "((docid_t)0x7FFFFFFF)" 595 . 616)))
          ("DEFAULT_DEBUG_QRS_CHAIN" . ((string "\"_@_build_in_DebugQueryMatchQrsChain\"" 5567 . 5604)))
          ("DEFAULT_CONFIG_DIR" . ((string "\"default_conf/\"" 5931 . 5946)))
          ("DEFAULT_DEBUG_PROCESSOR" . ((string "\"_@_build_in_MatchInfoProcessor\"" 5637 . 5669)))
          ("MAX_QUOTA" . ((semantic-list "((quota_t)-1)" 635 . 648)))
          ("NULL_CLUSTER" . ((string "\"\"" 4582 . 4584)))
          ("BUILD_IN_REFERENCE_PREFIX" . ((string "\"_@_build_in_\"" 6107 . 6121)))
          ("GET_FILE_CONTENT_CMD" . ((string "\"file\"" 6503 . 6509)))
          ("RESULT_FORMAT_XML" . ((string "\"xml\"" 6537 . 6542)))
          ("DOCID_PARTITION_MODE" . ((string "\"docid\"" 4553 . 4560)))
          ("DEFAULT_QRS_CHAIN" . ((string "\"DEFAULT\"" 5525 . 5534)))
          ("FETCHSUMMARY_GID_SEPERATOR_DEPRECATED" . ((string "\"_\"" 6068 . 6071)))
          ("DEFAULT_DEBUG_RANK_PROFILE" . ((string "\"_@_build_in_DebugQueryMatchRankProfile\"" 5705 . 5745)))
          ("FETCHSUMMARY_GID_SEPERATOR" . ((string "\"|\"" 6018 . 6021)))
          ("LOCAL_USER_NAME_DEFAULT" . ((string "\"ha\"" 6618 . 6622)))
          ("RAW_DOCUMENT_FORMAT_ISEARCH" . ((string "\"isearch\"" 6879 . 6888)))
          ("ISEARCH_H_")
          ("DEFAULT_SUMMARY_PROFILE" . ((string "\"DefaultProfile\"" 5887 . 5903)))
          ("PROVIDER_VAR_NAME_PREFIX" . ((string "\"_@_user_data_\"" 6155 . 6170)))
          ("RESULT_FORMAT_PROTOBUF" . ((string "\"protobuf\"" 6574 . 6584)))
          ("LOCAL_SERVICE_NAME_DEFAULT" . ((string "\"local_service\"" 6658 . 6673)))
          ("HEART_BEAT_META_INFO_KEY" . ((string "\"WorkerInfo\"" 6708 . 6720)))
          ("HEART_BEAT_CLUSTER_NAME" . ((string "\"__ha3_admin_cluster_name_\"" 6753 . 6780)))
          ("PLUGIN_PATH_NAME" . ((string "\"plugins/\"" 5487 . 5497)))
          ("HTTP_SUPPORT_PREFIX" . ((string "\"httpsupport:\"" 6437 . 6451)))
          ("RAW_DOCUMENT_FORMAT_HA3" . ((string "\"ha3\"" 6837 . 6842)))
          ("FSUTIL_BINARY" . ((string "\"fs_util_bin\"" 6912 . 6925)))
          ("BUILD_IN_JOIN_DOCID_VIRTUAL_ATTR_NAME_PREFIX" . ((string "\"_@_join_docid_\"" 6279 . 6295)))
          ("LIST_CMD" . ((string "\"ls\"" 6469 . 6473)))
          ("DEFAULT_RANK_PROFILE" . ((string "\"DefaultProfile\"" 5837 . 5853)))
          ("BUILD_IN_JOIN_DOCID_REF_PREIX" . ((string "\"_@_join_docid_\"" 6209 . 6225)))
          ("UNINITIALIZED_DOCID" . ((semantic-list "((docid_t)-2)" 677 . 690)))
          ("DEFAULT_DEBUG_SCORER" . ((string "\"_@_build_in_RecordInfoScorer\"" 5776 . 5806)))
          ("BUILD_IN_SUBJOIN_DOCID_VIRTUAL_ATTR_NAME_PREFIX" . ((string "\"_@_subjoin_docid_\"" 6352 . 6371)))
          ("STATUS_CHECK_PREFIX" . ((string "\"status\"" 6400 . 6408)))
          ("LOCAL_URI_PREFIX" . ((string "\"file://\"" 5972 . 5981)))
          )
))
  :file "!ssd!sdd!git!ha3!turing_test!search_test!temp!source_code!ha3!build!debug64!ha3!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
