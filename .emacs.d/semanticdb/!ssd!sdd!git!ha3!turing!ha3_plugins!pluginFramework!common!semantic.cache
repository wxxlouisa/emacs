;; Object common/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "common/"
  :tables
  (list
    (semanticdb-table "CommonDef.h"
      :major-mode 'c++-mode
      :tags 
        '( ("PLUG_COMMONDEF_H" variable (:constant-flag t) nil [34 50])
            ("limits" include (:system-flag t) nil [52 69])
            ("climits" include (:system-flag t) nil [70 88])
            ("cstring" include (:system-flag t) nil [89 107])
            ("string" include (:system-flag t) nil [108 125])
            ("map" include (:system-flag t) nil [126 140])
            ("tr1/memory" include (:system-flag t) nil [141 162])
            ("autil/CommonMacros.h" include (:system-flag t) nil [163 194])
            ("autil/mem_pool/Pool.h" include (:system-flag t) nil [195 227])
            ("autil/ConstString.h" include (:system-flag t) nil [228 258])
            ("autil/MultiValueType.h" include (:system-flag t) nil [259 292])
            ("amonitor/client/MetricProvider.h" include (:system-flag t) nil [293 336])
            ("matchdoc/ValueType.h" include (:system-flag t) nil [337 368])
            ("matchdoc/Trait.h" include (:system-flag t) nil [369 396])
            ("BEGIN_PLUG_NAMESPACE" variable (:constant-flag t) nil [407 427])
            ("END_PLUG_NAMESPACE" variable (:constant-flag t) nil [475 493])
            ("USE_PLUG_NAMESPACE" variable (:constant-flag t) nil [510 528])
            ("PLUG_NS" variable (:constant-flag t) nil [569 576])
            ("KeyValueMap" type
               (:typedef ("std::map" type
                     (:template-specifier 
                        ( ("std::string" type nil nil nil)
                          ("std::string" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :type "typedef")
                nil [594 649])
            ("HA3_TYPEDEF_PTR" variable (:constant-flag t) nil [658 673])
            ("MULTI_VALUE_SEPARATOR_CHAR" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "'\\x1D'"
                :type "char")
                nil [718 772])
            ("MULTI_VALUE_SEPARATOR_STR" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"\""
                :type ("std::string" type (:type "class") nil nil))
                nil [773 830])
            ("DOC_SEPARATOR_STR" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"\""
                :type ("std::string" type (:type "class") nil nil))
                nil [831 880])
            ("EMPTY_STRING" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"\""
                :type ("std::string" type (:type "class") nil nil))
                nil [881 924])
            ("RANK_SCORE2" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"__RANK_SCORE2__\""
                :type ("std::string" type (:type "class") nil nil))
                nil [925 982])
            ("KEY_CREATE_RANK_SORT" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"create_rank_sort\""
                :type ("std::string" type (:type "class") nil nil))
                nil [983 1050])
            ("KEY_CREATE_QUERY" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"create_query\""
                :type ("std::string" type (:type "class") nil nil))
                nil [1051 1110])
            ("QUERY_KEY" variable
               (:typemodifiers ("static")
                :constant-flag t
                :default-value "\"__origin_query__\""
                :type ("std::string" type (:type "class") nil nil))
                nil [1111 1167])
            ("STATIC_ASSERT" variable (:constant-flag t) nil [1177 1190])
            ("ha_plugin" type
               (:members 
                  ( ("plugin_framework" type
                       (:members 
                          ( ("VariableType" type
                               (:typedef ("matchdoc::BuiltinType" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1372 1415])
                            ("IParameterApi" type
                               (:prototype t
                                :type "class")
                                (reparse-symbol namespacesubparts) [1417 1437])
                            ("IResourceReaderApi" type
                               (:prototype t
                                :type "class")
                                (reparse-symbol namespacesubparts) [1438 1463])
                            ("AppInitWrapper" type
                               (:members 
                                  ( ("AppInitWrapper" function
                                       (:constructor-flag t
                                        :type ("AppInitWrapper" type (:type "struct") nil nil))
                                        (reparse-symbol classsubparts) [1492 1603])
                                    ("parameter" variable
                                       (:pointer 1
                                        :constant-flag t
                                        :type ("IParameterApi" type (:type "class") nil nil))
                                        (reparse-symbol classsubparts) [1608 1640])
                                    ("resourceReader" variable
                                       (:pointer 1
                                        :constant-flag t
                                        :type ("IResourceReaderApi" type (:type "class") nil nil))
                                        (reparse-symbol classsubparts) [1645 1686])
                                    ("metricProvider" variable
                                       (:pointer 1
                                        :type ("amonitor::client::MetricProvider" type (:type "class") nil nil))
                                        (reparse-symbol classsubparts) [1691 1740]))                                  
                                :type "struct")
                                (reparse-symbol namespacesubparts) [1464 1743])
                            ("score_t" type
                               (:typedef ("double")
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1843 1866])
                            ("fieldboost_t" type
                               (:typedef ("int32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1867 1896])
                            ("indexid_t" type
                               (:typedef ("uint32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1897 1924])
                            ("fieldid_t" type
                               (:typedef ("int32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1925 1951])
                            ("summaryfieldid_t" type
                               (:typedef ("int32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1952 1985])
                            ("fieldmap_t" type
                               (:typedef ("uint8_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [1986 2013])
                            ("docpayload_t" type
                               (:typedef ("uint16_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [2014 2044])
                            ("pos_t" type
                               (:typedef ("uint32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [2045 2068])
                            ("docid_t" type
                               (:typedef ("int32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [2069 2093])
                            ("fieldbitmap_t" type
                               (:typedef ("uint32_t" type (:type "class") nil nil)
                                :type "typedef")
                                (reparse-symbol namespacesubparts) [2094 2125])
                            ("INVALID_SUMMARYFIELDID" variable
                               (:constant-flag t
                                :default-value "(summaryfieldid_t)-1"
                                :type ("summaryfieldid_t" type (:type "class") nil nil))
                                (reparse-symbol namespacesubparts) [2127 2196])
                            ("SubDocDisplayType" type
                               (:members 
                                  ( ("SUB_DOC_DISPLAY_NO" variable
                                       (:constant-flag t
                                        :default-value (2248 2249)
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2227 2249])
                                    ("SUB_DOC_DISPLAY_FLAT" variable
                                       (:constant-flag t
                                        :default-value (2278 2279)
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2255 2279])
                                    ("SUB_DOC_DISPLAY_GROUP" variable
                                       (:constant-flag t
                                        :default-value (2309 2310)
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2285 2310]))                                  
                                :type "enum")
                                (reparse-symbol namespacesubparts) [2198 2313])
                            ("HaCompressType" type
                               (:members 
                                  ( ("INVALID_COMPRESS_TYPE" variable
                                       (:constant-flag t
                                        :default-value (2365 2366)
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2341 2366])
                                    ("NO_COMPRESS" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2372 2384])
                                    ("Z_SPEED_COMPRESS" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2389 2406])
                                    ("Z_DEFAULT_COMPRESS" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2411 2430])
                                    ("SNAPPY" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2435 2443]))                                  
                                :type "enum")
                                (reparse-symbol namespacesubparts) [2315 2444])
                            ("FetchSummaryType" type
                               (:members 
                                  ( ("BY_UNKNOWN" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2474 2485])
                                    ("BY_DOCID" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2490 2499])
                                    ("BY_PK" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2504 2510])
                                    ("BY_RAWPK" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2515 2525]))                                  
                                :type "enum")
                                (reparse-symbol namespacesubparts) [2446 2526])
                            ("AtomicSyntaxExprType" type
                               (:members 
                                  ( ("UNKNOWN" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2560 2568])
                                    ("INTEGER_VALUE" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2573 2587])
                                    ("FLOAT_VALUE" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2592 2604])
                                    ("STRING_VALUE" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2609 2622])
                                    ("ATTRIBUTE_NAME" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [2627 2642]))                                  
                                :type "enum")
                                (reparse-symbol namespacesubparts) [2528 2645])
                            ("TYPE_CONVERT_HELPER" variable (:constant-flag t) (reparse-symbol namespacesubparts) [2689 2708])
                            ("matchdoc::bt_unknown" variable (:type "int") (reparse-symbol namespacesubparts) [2825 2853])
                            ("matchdoc::bt_int8" variable (:type "int") (reparse-symbol namespacesubparts) [2855 2880])
                            ("matchdoc::bt_int16" variable (:type "int") (reparse-symbol namespacesubparts) [2882 2908])
                            ("matchdoc::bt_int32" variable (:type "int") (reparse-symbol namespacesubparts) [2910 2936])
                            ("matchdoc::bt_int64" variable (:type "int") (reparse-symbol namespacesubparts) [2938 2964])
                            ("matchdoc::bt_uint8" variable (:type "int") (reparse-symbol namespacesubparts) [2966 2992])
                            ("matchdoc::bt_uint16" variable (:type "int") (reparse-symbol namespacesubparts) [2994 3021])
                            ("matchdoc::bt_uint32" variable (:type "int") (reparse-symbol namespacesubparts) [3023 3050])
                            ("matchdoc::bt_uint64" variable (:type "int") (reparse-symbol namespacesubparts) [3052 3079])
                            ("matchdoc::bt_float" variable (:type "int") (reparse-symbol namespacesubparts) [3081 3107])
                            ("matchdoc::bt_double" variable (:type "int") (reparse-symbol namespacesubparts) [3109 3136])
                            ("matchdoc::bt_string" variable (:type "int") (reparse-symbol namespacesubparts) [3138 3165])
                            ("matchdoc::bt_bool" variable (:type "int") (reparse-symbol namespacesubparts) [3167 3192])
                            ("matchdoc::bt_hash_128" variable (:type "int") (reparse-symbol namespacesubparts) [3194 3223])
                            ("matchdoc::bt_user_type1" variable (:type "int") (reparse-symbol namespacesubparts) [3280 3304])
                            ("matchdoc::bt_max" variable (:type "int") (reparse-symbol namespacesubparts) [3356 3373])
                            ("LevelQueryType" type
                               (:members 
                                  ( ("ONLY_FIRST_LEVEL" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [3429 3446])
                                    ("CHECK_FIRST_LEVEL" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [3451 3469])
                                    ("BOTH_LEVEL" variable
                                       (:constant-flag t
                                        :type "int")
                                        (reparse-symbol enumsubparts) [3474 3485]))                                  
                                :type "enum")
                                (reparse-symbol namespacesubparts) [3403 3488]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [1332 3511]))                  
                :type "namespace")
                nil [1332 3511]))          
      :file "CommonDef.h"
      :pointmax 3622
      :fsize 3647
      :lastmodtime '(23228 20810 636709 189000)
      :unmatched-syntax '((thing 1370 . 1371) (thing 1342 . 1343) (thing 1308 . 1309) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2763 . 2791) (thing 2791 . 2792) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2793 . 2818) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2797 . 2825) (thing 2818 . 2819) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2820 . 2846) (thing 2825 . 2826) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2825 . 2853) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2827 . 2852) (thing 2846 . 2847) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2848 . 2874) (thing 2852 . 2853) (thing 2853 . 2854) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2854 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2855 . 2880) (thing 2874 . 2875) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2876 . 2902) (thing 2880 . 2881) (thing 2880 . 2881) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2882 . 2908) (thing 2902 . 2903) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2904 . 2930) (thing 2908 . 2909) (thing 2908 . 2909) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2910 . 2936) (thing 2930 . 2931) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2932 . 2959) (thing 2936 . 2937) (thing 2936 . 2937) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2938 . 2964) (thing 2959 . 2960) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2961 . 2988) (thing 2964 . 2965) (thing 2964 . 2965) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2993) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2966 . 2992) (thing 2988 . 2989) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2990 . 3017) (thing 2992 . 2993) (thing 2993 . 2994) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2994 . 3021) (thing 2995 . 3022) (thing 2995 . 3022) (thing 2995 . 3022) (thing 2995 . 3022) (thing 2995 . 3022) (thing 2995 . 3022) (thing 2995 . 3022) (thing 3017 . 3018) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3019 . 3045) (thing 3021 . 3022) (thing 3022 . 3023) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3023 . 3050) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3024 . 3051) (thing 3045 . 3046) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3047 . 3074) (thing 3050 . 3051) (thing 3051 . 3052) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3052 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3053 . 3079) (thing 3074 . 3075) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3076 . 3103) (thing 3079 . 3080) (thing 3079 . 3080) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3108) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3081 . 3107) (thing 3103 . 3104) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3105 . 3130) (thing 3107 . 3108) (thing 3108 . 3109) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3109 . 3136) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3110 . 3137) (thing 3130 . 3131) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3132 . 3161) (thing 3136 . 3137) (thing 3137 . 3138) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3138 . 3165) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3139 . 3164) (thing 3161 . 3162) (thing 3164 . 3170) (thing 3164 . 3165) (thing 3165 . 3166) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3166 . 3195) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3167 . 3192) (thing 3171 . 3176) (thing 3177 . 3185) (thing 3185 . 3186) (thing 3186 . 3187) (thing 3187 . 3198) (thing 3192 . 3193) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3194 . 3223) (thing 3195 . 3196) (thing 3198 . 3204) (thing 3199 . 3215) (thing 3205 . 3210) (thing 3211 . 3219) (thing 3216 . 3217) (thing 3219 . 3220) (thing 3220 . 3221) (thing 3221 . 3232) (thing 3223 . 3224) (thing 3226 . 3232) (thing 3233 . 3249) (thing 3233 . 3238) (thing 3239 . 3247) (thing 3243 . 3249) (thing 3247 . 3248) (thing 3248 . 3249) (thing 3249 . 3260) (thing 3250 . 3255) (thing 3250 . 3251) (thing 3256 . 3264) (thing 3261 . 3277) (thing 3264 . 3265) (thing 3265 . 3266) (thing 3266 . 3277) (thing 3277 . 3283) (thing 3278 . 3291) (thing 3278 . 3279) (thing 3284 . 3289) (thing 3290 . 3298) (thing 3292 . 3293) (thing 3298 . 3299) (thing 3299 . 3300) (thing 3300 . 3311) (thing 3305 . 3311) (thing 3312 . 3325) (thing 3312 . 3317) (thing 3318 . 3326) (thing 3326 . 3327) (thing 3326 . 3327) (thing 3327 . 3328) (thing 3328 . 3339) (thing 3340 . 3353) (thing 3354 . 3355) (thing 3449 . 3465) (thing 3465 . 3466) (thing 3466 . 3467) (thing 3469 . 3494) (thing 3483 . 3499) (thing 3494 . 3495) (thing 3495 . 3500) (thing 3499 . 3500) (thing 3500 . 3501) (thing 3500 . 3501) (thing 3501 . 3502) (thing 3502 . 3516) (thing 3503 . 3528) (thing 3511 . 3527) (thing 3516 . 3517) (thing 3517 . 3520) (thing 3520 . 3521) (thing 3521 . 3522) (thing 3522 . 3528) (thing 3527 . 3528) (thing 3528 . 3529) (thing 3528 . 3529) (thing 3528 . 3529) (thing 3529 . 3530) (thing 3529 . 3534) (thing 3530 . 3531) (thing 3531 . 3556) (thing 3534 . 3535) (thing 3535 . 3536) (thing 3536 . 3550) (thing 3550 . 3551) (thing 3551 . 3554) (thing 3554 . 3555) (thing 3555 . 3556) (thing 3556 . 3562) (thing 3556 . 3557) (thing 3557 . 3562) (thing 3562 . 3563) (thing 3562 . 3563) (thing 3563 . 3564) (thing 3563 . 3564) (thing 3564 . 3565) (thing 3564 . 3578) (thing 3578 . 3579) (thing 3579 . 3582) (thing 3582 . 3583) (thing 3583 . 3584) (thing 3584 . 3590) (thing 3590 . 3591) (thing 3591 . 3592) (thing 3592 . 3593))
      :lexical-table 
        '(("PLUG_NS" (spp-arg-list ("x") 576 . 579) . 
              ((symbol "ha_plugin" 580 . 589) (punctuation ":" 589 . 590) (punctuation ":" 590 . 591) (symbol "x" 591 . 592)))
          ("STATIC_ASSERT" (spp-arg-list ("X") 1190 . 1193) . ((punctuation ";" 1194 . 1195)))
          ("USE_PLUG_NAMESPACE" (spp-arg-list ("x") 528 . 531) . 
              ((USING "using" 532 . 537) (NAMESPACE "namespace" 538 . 547) (symbol "ha_plugin" 548 . 557) (punctuation ":" 557 . 558) (punctuation ":" 558 . 559) (symbol "x" 559 . 560)))
          ("PLUG_COMMONDEF_H")
          ("BEGIN_PLUG_NAMESPACE" (spp-arg-list ("x") 427 . 430) . 
              ((NAMESPACE "namespace" 431 . 440) (symbol "ha_plugin" 441 . 450) (open-paren "{" 451 . 452) (NAMESPACE "namespace" 453 . 462) (symbol "x" 463 . 464) (open-paren "{" 465 . 466)))
          ("HA3_TYPEDEF_PTR" (spp-arg-list ("x") 673 . 676) . 
              ((TYPEDEF "typedef" 677 . 684) (symbol "std" 685 . 688) (punctuation ":" 688 . 689) (punctuation ":" 689 . 690) (symbol "tr1" 690 . 693) (punctuation ":" 693 . 694) (punctuation ":" 694 . 695) (symbol "shared_ptr" 695 . 705) (punctuation "<" 705 . 706) (symbol "x" 706 . 707) (punctuation ">" 707 . 708) (spp-symbol-merge ((symbol "x" 709 . 710) (symbol "Ptr" 712 . 715)) 709 . 715) (punctuation ";" 715 . 716)))
          ("END_PLUG_NAMESPACE" (spp-arg-list ("x") 493 . 496) . ((close-paren "}" 497 . 498) (close-paren "}" 499 . 500)))
          )
))
  :file "!ssd!sdd!git!ha3!turing!ha3_plugins!pluginFramework!common!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
