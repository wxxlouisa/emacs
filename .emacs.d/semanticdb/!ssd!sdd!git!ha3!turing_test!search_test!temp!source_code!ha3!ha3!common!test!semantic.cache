;; Object test/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "test/"
  :tables
  (list
    (semanticdb-table "MatchDocsTest.cpp"
      :major-mode 'c++-mode
      :tags 
        '( ("unittest/unittest.h" include (:system-flag t) nil [1 30])
            ("ha3/common.h" include (:system-flag t) nil [31 54])
            ("ha3/isearch.h" include (:system-flag t) nil [55 79])
            ("ha3/util/Log.h" include (:system-flag t) nil [80 105])
            ("ha3/common/MatchDocs.h" include (:system-flag t) nil [106 139])
            ("ha3/common/test/ResultConstructor.h" include (:system-flag t) nil [140 186])
            ("matchdoc/MatchDoc.h" include (:system-flag t) nil [187 217])
            ("matchdoc/Reference.h" include (:system-flag t) nil [218 249])
            ("matchdoc/SubDocAccessor.h" include (:system-flag t) nil [250 286])
            ("ha3/common/GlobalIdentifier.h" include (:system-flag t) nil [287 327])
            ("autil/TimeUtility.h" include (:system-flag t) nil [328 358])
            ("autil/MultiValueType.h" include (:system-flag t) nil [359 392])
            ("autil/MultiValueCreator.h" include (:system-flag t) nil [393 429])
            ("string" include (:system-flag t) nil [430 447])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [449 469])
            ("autil" using (:type ("autil" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [470 492])
            ("USE_HA3_NAMESPACE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("util" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [512 517]))                  
                :type "int")
                nil [494 518])
            ("IE_NAMESPACE_USE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("index" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [536 542]))                  
                :type "int")
                nil [519 543])
            ("BEGIN_HA3_NAMESPACE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("common" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [564 571]))                  
                :type "int")
                nil [544 572])
            ("MatchDocsTest" type
               (:superclasses 
                  ( ("TESTBASE" type
                       (:protection "public"
                        :type "class")
                        nil nil))                  
                :members 
                  ( ("public" label nil (reparse-symbol classsubparts) [614 621])
                    ("MatchDocsTest" function
                       (:prototype-flag t
                        :constructor-flag t
                        :type ("MatchDocsTest" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [626 642])
                    ("MatchDocsTest" function
                       (:prototype-flag t
                        :destructor-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [647 664])
                    ("public" label nil (reparse-symbol classsubparts) [665 672])
                    ("setUp" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [677 690])
                    ("tearDown" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [695 711])
                    ("protected" label nil (reparse-symbol classsubparts) [712 722])
                    ("prepareMatchDocs" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [727 751])
                    ("checkDeserialize" function
                       (:prototype-flag t
                        :arguments 
                          ( ("dataBuffer" variable
                               (:reference 1
                                :type ("autil::DataBuffer" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [778 808])
                            ("serializeLevel" variable (:type ("uint8_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [809 832])
                            ("hasRef1" variable (:type "bool") (reparse-symbol arg-sub-list) [859 872])
                            ("hasRef2" variable (:type "bool") (reparse-symbol arg-sub-list) [873 886])
                            ("hasRef3" variable (:type "bool") (reparse-symbol arg-sub-list) [887 900])
                            ("expectedDocId" variable (:type ("docid_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [927 949])
                            ("value1" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [950 965])
                            ("value2" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [992 1007])
                            ("value3" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1008 1023]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [756 1024])
                    ("protected" label nil (reparse-symbol classsubparts) [1025 1035])
                    ("_pool" variable (:type ("autil::mem_pool::Pool" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1040 1068])
                    ("protected" label nil (reparse-symbol classsubparts) [1069 1079])
                    ("HA3_LOG_DECLARE" function
                       (:prototype-flag t
                        :type "int")
                        (reparse-symbol classsubparts) [1084 1102]))                  
                :type "class")
                nil [574 1105])
            ("HA3_LOG_SETUP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("common" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1121 1128])
                    ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1129 1143]))                  
                :type "int")
                nil [1107 1144])
            ("MatchDocsTest" function
               (:constructor-flag t
                :parent "MatchDocsTest"
                :type ("MatchDocsTest" type (:type "class") nil nil))
                nil [1147 1181])
            ("MatchDocsTest" function
               (:destructor-flag t
                :parent "MatchDocsTest"
                :type "void")
                nil [1183 1218])
            ("setUp" function
               (:parent "MatchDocsTest"
                :type "void")
                nil [1220 1281])
            ("tearDown" function
               (:parent "MatchDocsTest"
                :type "void")
                nil [1283 1350])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1359 1373])
                    ("" variable (:type ("testSerializeAndDeserializeWithoutJson" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1374 1413]))                  
                :type "int")
                nil [1352 5798])
            ("ASSERT_EXTRA_DOCID_HELPER" variable (:constant-flag t) nil [5808 5833])
            ("TEST_SET_GLOBALID_HELPER" variable (:constant-flag t) nil [6417 6441])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7877 7891])
                    ("" variable (:type ("testSetGlobalIdInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7892 7912]))                  
                :type "int")
                nil [7870 8295])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8304 8318])
                    ("" variable (:type ("testSetGlobalIdInfoNoExtraRef" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8319 8349]))                  
                :type "int")
                nil [8297 8829])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8838 8852])
                    ("" variable (:type ("testSerializeAndDeserializeVector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8853 8887]))                  
                :type "int")
                nil [8831 12559])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12568 12582])
                    ("" variable (:type ("testSerializeAndDeserializeWithSubMatchDoc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12583 12626]))                  
                :type "int")
                nil [12561 15624])
            ("TEST_F" function
               (:arguments 
                  ( ("" variable (:type ("MatchDocsTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15633 15647])
                    ("" variable (:type ("testSerializeLevel" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15648 15667]))                  
                :type "int")
                nil [15626 17575])
            ("checkDeserialize" function
               (:parent "MatchDocsTest"
                :arguments 
                  ( ("dataBuffer" variable
                       (:reference 1
                        :type ("autil::DataBuffer" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17614 17644])
                    ("serializeLevel" variable (:type ("uint8_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17645 17668])
                    ("hasRef1" variable (:type "bool") (reparse-symbol arg-sub-list) [17706 17719])
                    ("hasRef2" variable (:type "bool") (reparse-symbol arg-sub-list) [17720 17733])
                    ("hasRef3" variable (:type "bool") (reparse-symbol arg-sub-list) [17734 17747])
                    ("expectedDocId" variable (:type ("docid_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17785 17807])
                    ("value1" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17808 17823])
                    ("value2" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17861 17876])
                    ("value3" variable (:type ("int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17877 17892]))                  
                :type "void")
                nil [17577 19051])
            ("END_HA3_NAMESPACE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("common" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19071 19078]))                  
                :type "int")
                nil [19053 19079]))          
      :file "MatchDocsTest.cpp"
      :pointmax 19080
      :fsize 19079
      :lastmodtime '(23220 43218 955782 66000)
      :unmatched-syntax nil
      :lexical-table 
        '(("ASSERT_EXTRA_DOCID_HELPER" (spp-arg-list ("isExist" "value" "type" "name") 5833 . 5861) . 
              ((DO "do" 5878 . 5880) (semantic-list "{                                                                \\
        matchdoc::Reference<type> *ref = matchDocs->get##name##Ref();   \\
        ASSERT_EQ(bool(isExist), ref != NULL);                          \\
        if (!ref) {                                                     \\
            break;                                                      \\
        }                                                               \\
        ASSERT_EQ((value), ref->getReference(matchDoc));                \\
    }" 5881 . 6397) (WHILE "while" 6398 . 6403) (semantic-list "(0)" 6404 . 6407)))
          ("TEST_SET_GLOBALID_HELPER" (spp-arg-list ("phaseOneInfoFlag") 6441 . 6459) . 
              ((DO "do" 6487 . 6489) (semantic-list "{                                                                \\
        MatchDocs *matchDocs = new MatchDocs();                         \\
        uint8_t phaseOneInfo = phaseOneInfoFlag;                        \\
        resultConstructor.prepareMatchDocs(matchDocs, &_pool, phaseOneInfo); \\
        ASSERT_TRUE(matchDocs);                                         \\
        matchDocs->setGlobalIdInfo(1, versionid_t(2), 3, 4, phaseOneInfo); \\
        auto hashIdRef = matchDocs->getHashIdRef();                     \\
        for(uint32_t i = 0; i < matchDocs->size(); ++i) {               \\
            auto matchDoc = matchDocs->getMatchDoc(i);                  \\
            ASSERT_EQ(hashid_t(1), hashIdRef->get(matchDocs->getMatchDoc(i))); \\
            ASSERT_EXTRA_DOCID_HELPER(PHASE_ONE_HAS_FULL_VERSION(phaseOneInfo), \\
                    FullIndexVersion(3), FullIndexVersion, FullIndexVersion); \\
            ASSERT_EXTRA_DOCID_HELPER(PHASE_ONE_HAS_INDEX_VERSION(phaseOneInfo), \\
                    versionid_t(2), versionid_t, IndexVersion);         \\
            ASSERT_EXTRA_DOCID_HELPER(PHASE_ONE_HAS_IP(phaseOneInfo),   \\
                    uint32_t(4), uint32_t, Ip);                         \\
        }                                                               \\
        delete matchDocs;                                               \\
    }" 6490 . 7858) (WHILE "while" 7859 . 7864) (semantic-list "(0)" 7865 . 7868)))
          )
))
  :file "!ssd!sdd!git!ha3!turing_test!search_test!temp!source_code!ha3!ha3!common!test!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
