;; Object framework/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "framework/"
  :tables
  (list
    (semanticdb-table "ops.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Classes and functions used to construct graphs.\"\"\"" code nil nil [690 743])
            ("__future__" include nil nil [773 811])
            ("__future__" include nil nil [812 843])
            ("__future__" include nil nil [844 881])
            ("collections" include nil nil [883 901])
            ("copy" include nil nil [902 913])
            ("linecache" include nil nil [914 930])
            ("re" include nil nil [931 940])
            ("sys" include nil nil [941 951])
            ("threading" include nil nil [952 968])
            ("six" include nil nil [970 980])
            ("six.moves" include nil nil [981 1009])
            ("tensorflow.core.framework" include nil nil [1048 1100])
            ("tensorflow.core.framework" include nil nil [1101 1151])
            ("tensorflow.core.framework" include nil nil [1152 1199])
            ("tensorflow.core.framework" include nil nil [1200 1250])
            ("tensorflow.core.framework" include nil nil [1251 1301])
            ("tensorflow.python" include nil nil [1302 1358])
            ("tensorflow.python.eager" include nil nil [1359 1402])
            ("tensorflow.python.eager" include nil nil [1403 1443])
            ("tensorflow.python.eager" include nil nil [1444 1484])
            ("tensorflow.python.framework" include nil nil [1485 1535])
            ("tensorflow.python.framework" include nil nil [1536 1591])
            ("tensorflow.python.framework" include nil nil [1592 1638])
            ("tensorflow.python.framework" include nil nil [1639 1685])
            ("tensorflow.python.framework" include nil nil [1686 1741])
            ("tensorflow.python.framework" include nil nil [1742 1790])
            ("tensorflow.python.framework" include nil nil [1791 1843])
            ("tensorflow.python.framework" include nil nil [1844 1892])
            ("tensorflow.python.platform" include nil nil [1893 1953])
            ("tensorflow.python.util" include nil nil [1954 1995])
            ("tensorflow.python.util" include nil nil [1996 2046])
            ("tensorflow.python.util" include nil nil [2047 2095])
            ("_USE_C_API" variable nil nil [2863 2881])
            ("tensor_id" function
               (:documentation "Returns a unique identifier for this Tensor."
                :arguments 
                  ( ("tensor" variable nil (reparse-symbol function_parameters) [2898 2904]))                  )
                nil [2884 3016])
            ("_NullContextmanager" type
               (:superclasses ("object")
                :members 
                  ( ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3070 3074]))                          )
                        (reparse-symbol indented_block_body) [3056 3086])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3102 3106])
                            ("type_arg" variable nil (reparse-symbol function_parameters) [3108 3116])
                            ("value_arg" variable nil (reparse-symbol function_parameters) [3118 3127])
                            ("traceback_arg" variable nil (reparse-symbol function_parameters) [3129 3142]))                          )
                        (reparse-symbol indented_block_body) [3089 3205]))                  
                :type "class")
                nil [3018 3205])
            ("_override_helper" function
               (:documentation "Overrides (string) operator on Tensors to call func.

  Args:
    clazz_object: the class to override for; either Tensor or SparseTensor.
    operator: the string name of the operator to override.
    func: the function that replaces the overridden operator.

  Raises:
    ValueError: If operator has already been overwritten,
      or if operator is not allowed to be overwritten.
  "
                :arguments 
                  ( ("clazz_object" variable nil (reparse-symbol function_parameters) [3228 3240])
                    ("operator" variable nil (reparse-symbol function_parameters) [3242 3250])
                    ("func" variable nil (reparse-symbol function_parameters) [3252 3256]))                  )
                nil [3207 4195])
            ("_as_graph_element" function
               (:documentation "Convert `obj` to a graph element if possible, otherwise return `None`.

  Args:
    obj: Object to convert.

  Returns:
    The result of `obj._as_graph_element()` if that method is available;
        otherwise `None`.
  "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [4219 4222]))                  )
                nil [4197 4578])
            ("_TENSOR_LIKE_TYPES" variable nil nil [4580 4608])
            ("is_dense_tensor_like" function
               (:documentation "EXPERIMENTAL: Returns true if `t` implements the tensor interface.

  See `register_dense_tensor_like_type()` for the current definition of a
  \"tensor-like type\".

  Args:
    t: An object.

  Returns:
    True iff `t` is an instance of one of the registered \"tensor-like\" types.
  "
                :arguments 
                  ( ("t" variable nil (reparse-symbol function_parameters) [4636 4637]))                  )
                nil [4611 4975])
            ("register_dense_tensor_like_type" function
               (:documentation "EXPERIMENTAL: Registers `tensor_type` as implementing the tensor interface.

  A \"tensor-like type\" can represent a single dense tensor, and implements
  the `name` and `dtype` properties.

  Args:
    tensor_type: A type implementing the tensor interface.

  Raises:
    TypeError: If `tensor_type` does not implement the tensor interface.
  "
                :arguments 
                  ( ("tensor_type" variable nil (reparse-symbol function_parameters) [5013 5024]))                  )
                nil [4977 6092])
            ("uid" function (:documentation "A unique (within this program execution) integer.") nil [6094 6191])
            ("_TensorLike" type
               (:documentation "Internal cls for grouping Tensor, SparseTensor, ..., for is_instance."
                :superclasses ("object")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [6380 6384]))                  
                :type "class")
                nil [6273 6385])
            ("Tensor" type
               (:documentation "Represents one of the outputs of an `Operation`.

  A `Tensor` is a symbolic handle to one of the outputs of an
  `Operation`. It does not hold the values of that operation's output,
  but instead provides a means of computing those values in a
  TensorFlow @{tf.Session}.

  This class has two primary purposes:

  1. A `Tensor` can be passed as an input to another `Operation`.
     This builds a dataflow connection between operations, which
     enables TensorFlow to execute an entire `Graph` that represents a
     large, multi-step computation.

  2. After the graph has been launched in a session, the value of the
     `Tensor` can be computed by passing it to
     @{tf.Session.run}.
     `t.eval()` is a shortcut for calling
     `tf.get_default_session().run(t)`.

  In the following example, `c`, `d`, and `e` are symbolic `Tensor`
  objects, whereas `result` is a numpy array that stores a concrete
  value:

  ```python
  # Build a dataflow graph.
  c = tf.constant([[1.0, 2.0], [3.0, 4.0]])
  d = tf.constant([[1.0, 1.0], [0.0, 1.0]])
  e = tf.matmul(c, d)

  # Construct a `Session` to execute the graph.
  sess = tf.Session()

  # Execute the graph and store the value that `e` represents in `result`.
  result = sess.run(e)
  ```
  "
                :superclasses ("_TensorLike")
                :members 
                  ( ("OVERLOADABLE_OPERATORS" variable nil (reparse-symbol indented_block_body) [7733 8374])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Creates a new `Tensor`.

    Args:
      op: An `Operation`. `Operation` that computes this tensor.
      value_index: An `int`. Index of the operation's endpoint that produces
        this tensor.
      dtype: A `DType`. Type of elements stored in this tensor.

    Raises:
      TypeError: If the op is not an `Operation`.
    \"\"\"" code nil (reparse-symbol indented_block_body) [8427 8762])
                            ("if" code nil (reparse-symbol indented_block_body) [8767 8863])
                            ("self" variable nil (reparse-symbol indented_block_body) [8867 8880])
                            ("self" variable nil (reparse-symbol indented_block_body) [8885 8916])
                            ("self" variable nil (reparse-symbol indented_block_body) [8921 8957])
                            ("self" variable nil (reparse-symbol indented_block_body) [8962 9004])
                            ("self" variable nil (reparse-symbol indented_block_body) [9134 9154])
                            ("self" variable nil (reparse-symbol indented_block_body) [9312 9336])
                            ("self" variable nil (reparse-symbol indented_block_body) [9341 9357]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8391 8395])
                            ("op" variable nil (reparse-symbol function_parameters) [8397 8399])
                            ("value_index" variable nil (reparse-symbol function_parameters) [8401 8412])
                            ("dtype" variable nil (reparse-symbol function_parameters) [8414 8419]))                          
                        :documentation "Creates a new `Tensor`.

    Args:
      op: An `Operation`. `Operation` that computes this tensor.
      value_index: An `int`. Index of the operation's endpoint that produces
        this tensor.
      dtype: A `DType`. Type of elements stored in this tensor.

    Raises:
      TypeError: If the op is not an `Operation`.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8378 9357])
                    ("op" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9379 9383]))                          
                        :documentation "The `Operation` that produces this tensor as an output.")
                        (reparse-symbol indented_block_body) [9360 9472])
                    ("dtype" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9497 9501]))                          
                        :documentation "The `DType` of elements in this tensor.")
                        (reparse-symbol indented_block_body) [9475 9577])
                    ("graph" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9602 9606]))                          
                        :documentation "The `Graph` that contains this tensor.")
                        (reparse-symbol indented_block_body) [9580 9684])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9708 9712]))                          
                        :documentation "The string name of this tensor.")
                        (reparse-symbol indented_block_body) [9687 9904])
                    ("device" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9930 9934]))                          
                        :documentation "The name of the device on which this tensor will be produced, or None.")
                        (reparse-symbol indented_block_body) [9907 10045])
                    ("shape" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10070 10074]))                          
                        :documentation "Returns the `TensorShape` that represents the shape of this tensor.

    The shape is computed using shape inference functions that are
    registered in the Op for each `Operation`.  See
    @{tf.TensorShape}
    for more details of what a shape represents.

    The inferred shape of a tensor is used to provide shape
    information without having to launch the graph in a session. This
    can be used for debugging, and providing early error messages. For
    example:

    ```python
    c = tf.constant([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])

    print(c.shape)
    ==> TensorShape([Dimension(2), Dimension(3)])

    d = tf.constant([[1.0, 0.0], [0.0, 1.0], [1.0, 0.0], [0.0, 1.0]])

    print(d.shape)
    ==> TensorShape([Dimension(4), Dimension(2)])

    # Raises a ValueError, because `c` and `d` do not have compatible
    # inner dimensions.
    e = tf.matmul(c, d)

    f = tf.matmul(c, d, transpose_a=True, transpose_b=True)

    print(f.shape)
    ==> TensorShape([Dimension(3), Dimension(4)])
    ```

    In some cases, the inferred shape may have unknown dimensions. If
    the caller has additional information about the values of these
    dimensions, `Tensor.set_shape()` can be used to augment the
    inferred shape.

    Returns:
      A `TensorShape` representing the shape of this tensor.

    ")
                        (reparse-symbol indented_block_body) [10048 11428])
                    ("_shape_as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11450 11454]))                          )
                        (reparse-symbol indented_block_body) [11431 11576])
                    ("_shape_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11596 11600]))                          )
                        (reparse-symbol indented_block_body) [11579 11701])
                    ("get_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11718 11722]))                          
                        :documentation "Alias of Tensor.shape.")
                        (reparse-symbol indented_block_body) [11704 11780])
                    ("set_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11797 11801])
                            ("shape" variable nil (reparse-symbol function_parameters) [11803 11808]))                          
                        :documentation "Updates the shape of this tensor.

    This method can be called multiple times, and will merge the given
    `shape` with the current shape of this tensor. It can be used to
    provide additional information about the shape of this tensor that
    cannot be inferred from the graph alone. For example, this can be used
    to provide additional information about the shapes of images:

    ```python
    _, image_data = tf.TFRecordReader(...).read(...)
    image = tf.image.decode_png(image_data, channels=3)

    # The height and width dimensions of `image` are data dependent, and
    # cannot be computed without executing the op.
    print(image.shape)
    ==> TensorShape([Dimension(None), Dimension(None), Dimension(3)])

    # We know that each image in this dataset is 28 x 28 pixels.
    image.set_shape([28, 28, 3])
    print(image.shape)
    ==> TensorShape([Dimension(28), Dimension(28), Dimension(3)])
    ```

    Args:
      shape: A `TensorShape` representing the shape of this tensor.

    Raises:
      ValueError: If `shape` is not compatible with the current shape of
        this tensor.
    ")
                        (reparse-symbol indented_block_body) [11783 12985])
                    ("value_index" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13016 13020]))                          
                        :documentation "The index of this tensor in the outputs of its `Operation`.")
                        (reparse-symbol indented_block_body) [12988 13122])
                    ("consumers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13139 13143]))                          
                        :documentation "Returns a list of `Operation`s that consume this tensor.

    Returns:
      A list of `Operation`s.
    ")
                        (reparse-symbol indented_block_body) [13125 13289])
                    ("_add_consumer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13310 13314])
                            ("consumer" variable nil (reparse-symbol function_parameters) [13316 13324]))                          
                        :documentation "Add a consumer to this tensor.

    Args:
      consumer: an Operation.

    Raises:
      TypeError: if the consumer is not an Operation.
    ")
                        (reparse-symbol indented_block_body) [13292 13632])
                    ("_as_node_def_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13658 13662]))                          
                        :documentation "Return a value to use for the NodeDef \"input\" attribute.

    The returned string can be used in a NodeDef \"input\" attribute
    to indicate that the NodeDef uses this Tensor as input.

    Raises:
      ValueError: if this Tensor's Operation does not have a name.

    Returns:
      a string.
    ")
                        (reparse-symbol indented_block_body) [13635 14192])
                    ("_as_tf_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14213 14217]))                          )
                        (reparse-symbol indented_block_body) [14195 14446])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14461 14465]))                          )
                        (reparse-symbol indented_block_body) [14449 14750])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14766 14770]))                          )
                        (reparse-symbol indented_block_body) [14753 14922])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14938 14942]))                          )
                        (reparse-symbol indented_block_body) [14925 15033])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15047 15051])
                            ("other" variable nil (reparse-symbol function_parameters) [15053 15058]))                          )
                        (reparse-symbol indented_block_body) [15036 15162])
                    ("__array_priority__" variable nil (reparse-symbol indented_block_body) [15535 15559])
                    ("_override_operator" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("operator" variable nil (reparse-symbol function_parameters) [15602 15610])
                            ("func" variable nil (reparse-symbol function_parameters) [15612 15616]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [15563 15664])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15680 15684]))                          
                        :documentation "Dummy method to prevent iteration. Do not call.

    NOTE(mrry): If we register __getitem__ as an overloaded operator,
    Python will valiantly attempt to iterate over the Tensor from 0 to
    infinity.  Declaring this method prevents this unintended
    behavior.

    Raises:
      TypeError: when invoked.
    ")
                        (reparse-symbol indented_block_body) [15667 16068])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16084 16088]))                          
                        :documentation "Dummy method to prevent a tensor from being used as a Python `bool`.

    This overload raises a `TypeError` when the user inadvertently
    treats a `Tensor` as a boolean (e.g. in an `if` statement). For
    example:

    ```python
    if tf.constant(True):  # Will raise.
      # ...

    if tf.constant(5) < tf.constant(7):  # Will raise.
      # ...
    ```

    This disallows ambiguities between testing the Python value vs testing the
    dynamic condition of the `Tensor`.

    Raises:
      `TypeError`.
    ")
                        (reparse-symbol indented_block_body) [16071 16962])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16981 16985]))                          
                        :documentation "Dummy method to prevent a tensor from being used as a Python `bool`.

    This is the Python 2.x counterpart to `__bool__()` above.

    Raises:
      `TypeError`.
    ")
                        (reparse-symbol indented_block_body) [16965 17510])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17522 17526])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [17528 17537])
                            ("session" variable nil (reparse-symbol function_parameters) [17544 17551]))                          
                        :documentation "Evaluates this tensor in a `Session`.

    Calling this method will execute all preceding operations that
    produce the inputs needed for the operation that produces this
    tensor.

    *N.B.* Before invoking `Tensor.eval()`, its graph must have been
    launched in a session, and either a default session must be
    available, or `session` must be specified explicitly.

    Args:
      feed_dict: A dictionary that maps `Tensor` objects to feed values.
        See @{tf.Session.run} for a
        description of the valid feed values.
      session: (Optional.) The `Session` to be used to evaluate this tensor. If
        none, the default session will be used.

    Returns:
      A numpy array corresponding to the value of this tensor.

    ")
                        (reparse-symbol indented_block_body) [17513 18400])
                    ("_dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18412 18416]))                          )
                        (reparse-symbol indented_block_body) [18403 18516]))                  
                :type "class")
                nil [6387 18516])
            ("_EagerTensorBase" type
               (:documentation "Base class for EagerTensor."
                :superclasses ("Tensor")
                :members 
                  ( ("_delete_trace" function
                       (:typemodifiers ("static")
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("tid" variable nil (reparse-symbol function_parameters) [18670 18673]))                          
                        :documentation "Helper function to be called by __del__ of the subclass.")
                        (reparse-symbol indented_block_body) [18636 18770])
                    ("dtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18795 18799]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [18773 18997])
                    ("_numpy_text" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19016 19020])
                            ("is_repr" variable nil (reparse-symbol function_parameters) [19022 19029]))                          )
                        (reparse-symbol indented_block_body) [19000 19280])
                    ("numpy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19293 19297]))                          
                        :documentation "Returns a numpy array with the same contents as the Tensor.

    The contents of the Tensor must be backed by host memory. The
    as_cpu_tensor() method can be used ensure that this is true.

    TODO(ashankar,agarwal): Perhaps this should NOT reference the underlying
    buffer but instead always explicitly copy? Note that currently it may or may
    not copy based on whether the numpy data is properly aligned or not.

    Returns:
      A numpy array that may share memory with the Tensor object. Any changes
      to one may be reflected in the other.
    ")
                        (reparse-symbol indented_block_body) [19283 19952])
                    ("_numpy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19966 19970]))                          )
                        (reparse-symbol indented_block_body) [19955 20005])
                    ("_datatype_enum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20027 20031]))                          )
                        (reparse-symbol indented_block_body) [20008 20066])
                    ("_shape_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20086 20090]))                          
                        :documentation "The shape of this Tensor, as a tuple.

    This is more performant than tuple(shape().as_list()) as it avoids
    two list and one object creation. Marked private for now as from an API
    perspective, it would be better to have a single performant way of
    getting a shape rather than exposing shape() and shape_tuple()
    (and heaven forbid, shape_list() etc. as well!). Punting on that for now,
    but ideally one would work things out and remove the need for this method.

    Returns:
      tuple with the shape.
    ")
                        (reparse-symbol indented_block_body) [20069 20663])
                    ("_copy_to_device" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20686 20690])
                            ("context" variable nil (reparse-symbol function_parameters) [20692 20699])
                            ("device" variable nil (reparse-symbol function_parameters) [20701 20707]))                          )
                        (reparse-symbol indented_block_body) [20666 20782])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20797 20801]))                          )
                        (reparse-symbol indented_block_body) [20785 21003])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21019 21023]))                          )
                        (reparse-symbol indented_block_body) [21006 21171])
                    ("_override_operator" function
                       (:typemodifiers ("static")
                        :arguments 
                          ( ("name" variable nil (reparse-symbol function_parameters) [21213 21217])
                            ("func" variable nil (reparse-symbol function_parameters) [21219 21223]))                          
                        :decorators 
                          ( ("staticmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [21174 21268])
                    ("_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21281 21285])
                            ("ctx" variable nil (reparse-symbol function_parameters) [21287 21290])
                            ("device_name" variable nil (reparse-symbol function_parameters) [21297 21308]))                          
                        :documentation "Copies tensor to dest device.")
                        (reparse-symbol indented_block_body) [21271 22398])
                    ("_dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22448 22452]))                          )
                        (reparse-symbol indented_block_body) [22439 22502])
                    ("shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22527 22531]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22505 22591])
                    ("get_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22608 22612]))                          
                        :documentation "Alias of Tensor.shape.")
                        (reparse-symbol indented_block_body) [22594 22670])
                    ("_shape_as_list" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22692 22696]))                          
                        :documentation "The shape of the tensor as a list.")
                        (reparse-symbol indented_block_body) [22673 22781])
                    ("as_cpu_tensor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22802 22806]))                          
                        :documentation "A copy of this Tensor with contents backed by host memory.")
                        (reparse-symbol indented_block_body) [22784 22928])
                    ("as_gpu_tensor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22949 22953])
                            ("gpu_index" variable nil (reparse-symbol function_parameters) [22955 22964]))                          
                        :documentation "A copy of this Tensor with contents backed by memory on the GPU.

    Arguments:
      gpu_index: Identifies which GPU to place the contents on the returned
        Tensor in.

    Returns:
      A GPU-memory backed Tensor object initialized with the same contents
      as this Tensor.
    ")
                        (reparse-symbol indented_block_body) [22931 23337])
                    ("__bool__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23353 23357]))                          )
                        (reparse-symbol indented_block_body) [23340 23727])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23746 23750]))                          )
                        (reparse-symbol indented_block_body) [23730 23780])
                    ("op" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23861 23865]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23842 23937])
                    ("graph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23962 23966]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23940 24041])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24065 24069]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24044 24143])
                    ("set_shape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24160 24164])
                            ("shape" variable nil (reparse-symbol function_parameters) [24166 24171]))                          )
                        (reparse-symbol indented_block_body) [24146 24250])
                    ("value_index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24281 24285]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [24253 24366])
                    ("consumers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24383 24387]))                          )
                        (reparse-symbol indented_block_body) [24369 24466])
                    ("_add_consumer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24487 24491])
                            ("consumer" variable nil (reparse-symbol function_parameters) [24493 24501]))                          )
                        (reparse-symbol indented_block_body) [24469 24584])
                    ("_as_node_def_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24610 24614]))                          )
                        (reparse-symbol indented_block_body) [24587 24711])
                    ("_as_tf_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24732 24736]))                          )
                        (reparse-symbol indented_block_body) [24714 24819])
                    ("eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24831 24835])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [24837 24846])
                            ("session" variable nil (reparse-symbol function_parameters) [24853 24860]))                          )
                        (reparse-symbol indented_block_body) [24822 24939]))                  
                :type "class")
                nil [18565 24939])
            ("EagerTensor" variable nil nil [25062 25122])
            ("_TensorTensorConversionFunction" function (:arguments 
              ( ("t" variable nil (reparse-symbol function_parameters) [25161 25162])
                ("dtype" variable nil (reparse-symbol function_parameters) [25164 25169])
                ("name" variable nil (reparse-symbol function_parameters) [25176 25180])
                ("as_ref" variable nil (reparse-symbol function_parameters) [25187 25193]))              ) nil [25125 25430])
            ("_tensor_conversion_func_registry" variable nil nil [25432 25521])
            ("_tensor_conversion_func_cache" variable nil nil [25522 25556])
            ("_tensor_conversion_func_lock" variable nil nil [25557 25604])
            ("register_dense_tensor_like_type" code nil nil [25605 25644])
            ("convert_to_tensor" function
               (:documentation "Converts the given `value` to a `Tensor`.

  This function converts Python objects of various types to `Tensor`
  objects. It accepts `Tensor` objects, numpy arrays, Python lists,
  and Python scalars. For example:

  ```python
  import numpy as np

  def my_func(arg):
    arg = tf.convert_to_tensor(arg, dtype=tf.float32)
    return tf.matmul(arg, arg) + arg

  # The following calls are equivalent.
  value_1 = my_func(tf.constant([[1.0, 2.0], [3.0, 4.0]]))
  value_2 = my_func([[1.0, 2.0], [3.0, 4.0]])
  value_3 = my_func(np.array([[1.0, 2.0], [3.0, 4.0]], dtype=np.float32))
  ```

  This function can be useful when composing a new operation in Python
  (such as `my_func` in the example above). All standard Python op
  constructors apply this function to each of their Tensor-valued
  inputs, which allows those ops to accept numpy arrays, Python lists,
  and scalars in addition to `Tensor` objects.

  Args:
    value: An object whose type has a registered `Tensor` conversion function.
    dtype: Optional element type for the returned tensor. If missing, the
      type is inferred from the type of `value`.
    name: Optional name to use if a new `Tensor` is created.
    preferred_dtype: Optional element type for the returned tensor,
      used when dtype is None. In some cases, a caller may not have a
      dtype in mind when converting to a tensor, so preferred_dtype
      can be used as a soft preference.  If the conversion to
      `preferred_dtype` is not possible, this argument has no effect.

  Returns:
    An `Output` based on `value`.

  Raises:
    TypeError: If no conversion function is registered for `value`.
    RuntimeError: If a registered conversion function returns an invalid value.

  "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [25669 25674])
                    ("dtype" variable nil (reparse-symbol function_parameters) [25676 25681])
                    ("name" variable nil (reparse-symbol function_parameters) [25688 25692])
                    ("preferred_dtype" variable nil (reparse-symbol function_parameters) [25699 25714]))                  )
                nil [25647 27610])
            ("_error_prefix" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [27630 27634]))              ) nil [27612 27684])
            ("internal_convert_to_tensor" function
               (:documentation "Converts the given `value` to an `Tensor`.

  This function converts Python objects of various types to `Tensor`
  objects. It accepts `Tensor` objects, numpy arrays, Python lists,
  and Python scalars. For example:

  This function can be useful when composing a new operation in Python
  All standard Python op constructors apply this function to each of their
  Tensor-valued inputs, which allows those ops to accept numpy arrays, Python
  lists, and scalars in addition to `Tensor` objects.

  Args:
    value: An object whose type has a registered `Tensor` conversion function.
    dtype: Optional element type for the returned tensor. If missing, the
      type is inferred from the type of `value`.
    name: Optional name to use if a new `Tensor` is created.
    as_ref: True if we want the mutable view of Variables, if applicable.
    preferred_dtype: Optional element type for the returned tensor,
      used when dtype is None. In some cases, a caller may not have a
      dtype in mind when converting to a tensor, so preferred_dtype
      can be used as a soft preference.  If the conversion to
      `preferred_dtype` is not possible, this argument has no effect.
    ctx: Optional: The value of context.context().

  Returns:
    A `Tensor` based on `value`.

  Raises:
    TypeError: If no conversion function is registered for `value`.
    RuntimeError: If a registered conversion function returns an invalid value.

  "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [27717 27722])
                    ("dtype" variable nil (reparse-symbol function_parameters) [27755 27760])
                    ("name" variable nil (reparse-symbol function_parameters) [27798 27802])
                    ("as_ref" variable nil (reparse-symbol function_parameters) [27840 27846])
                    ("preferred_dtype" variable nil (reparse-symbol function_parameters) [27885 27900])
                    ("ctx" variable nil (reparse-symbol function_parameters) [27938 27941]))                  )
                nil [27686 32173])
            ("internal_convert_n_to_tensor" function
               (:documentation "Converts `values` to a list of `Tensor` objects.

  Args:
    values: A list of objects that can be consumed by `tf.convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor` objects.
    name: (Optional.) A name prefix to used when a new `Tensor` is
      created, in which case element `i` will be given the name `name
      + '_' + i`.
    as_ref: True if the caller wants the results as ref tensors.
    preferred_dtype: Optional element type for the returned tensors,
      used when dtype is None. In some cases, a caller may not have a
      dtype in mind when converting to a tensor, so preferred_dtype
      can be used as a soft preference.  If the conversion to
      `preferred_dtype` is not possible, this argument has no effect.
    ctx: The value of context.context().

  Returns:
    A list of `Tensor` and/or `IndexedSlices` objects.

  Raises:
    TypeError: If no conversion function is registered for an element in
      `values`.
    RuntimeError: If a registered conversion function returns an invalid
      value.
  "
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [32208 32214])
                    ("dtype" variable nil (reparse-symbol function_parameters) [32249 32254])
                    ("name" variable nil (reparse-symbol function_parameters) [32294 32298])
                    ("as_ref" variable nil (reparse-symbol function_parameters) [32338 32344])
                    ("preferred_dtype" variable nil (reparse-symbol function_parameters) [32385 32400])
                    ("ctx" variable nil (reparse-symbol function_parameters) [32440 32443]))                  )
                nil [32175 33995])
            ("convert_n_to_tensor" function
               (:documentation "Converts `values` to a list of `Tensor` objects.

  Args:
    values: A list of objects that can be consumed by `tf.convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor` objects.
    name: (Optional.) A name prefix to used when a new `Tensor` is
      created, in which case element `i` will be given the name `name
      + '_' + i`.
    preferred_dtype: Optional element type for the returned tensors,
      used when dtype is None. In some cases, a caller may not have a
      dtype in mind when converting to a tensor, so preferred_dtype
      can be used as a soft preference.  If the conversion to
      `preferred_dtype` is not possible, this argument has no effect.

  Returns:
    A list of `Tensor` and/or `IndexedSlices` objects.

  Raises:
    TypeError: If no conversion function is registered for an element in
      `values`.
    RuntimeError: If a registered conversion function returns an invalid
      value.
  "
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [34021 34027])
                    ("dtype" variable nil (reparse-symbol function_parameters) [34029 34034])
                    ("name" variable nil (reparse-symbol function_parameters) [34041 34045])
                    ("preferred_dtype" variable nil (reparse-symbol function_parameters) [34052 34067]))                  )
                nil [33997 35204])
            ("convert_to_tensor_or_indexed_slices" function
               (:documentation "Converts the given object to a `Tensor` or an `IndexedSlices`.

  If `value` is an `IndexedSlices` or `SparseTensor` it is returned
  unmodified. Otherwise, it is converted to a `Tensor` using
  `convert_to_tensor()`.

  Args:
    value: An `IndexedSlices`, `SparseTensor`, or an object that can be consumed
      by `convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor` or
      `IndexedSlices`.
    name: (Optional.) A name to use if a new `Tensor` is created.

  Returns:
    An `Tensor`, `IndexedSlices`, or `SparseTensor` based on `value`.

  Raises:
    ValueError: If `dtype` does not match the element type of `value`.
  "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [35246 35251])
                    ("dtype" variable nil (reparse-symbol function_parameters) [35253 35258])
                    ("name" variable nil (reparse-symbol function_parameters) [35265 35269]))                  )
                nil [35206 36065])
            ("internal_convert_to_tensor_or_indexed_slices" function
               (:documentation "Converts the given object to an `Tensor` or an `IndexedSlices`.

  If `value` is an `IndexedSlices` or `SparseTensor` it is returned
  unmodified. Otherwise, it is converted to a `Tensor` using
  `convert_to_tensor()`.

  Args:
    value: An `IndexedSlices`, `SparseTensor`, or an object that can be consumed
      by `convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor` or
      `IndexedSlices`.
    name: (Optional.) A name to use if a new `Tensor` is created.
    as_ref: True if the caller wants the results as ref tensors.

  Returns:
    An `Tensor`, `IndexedSlices`, or `SparseTensor` based on `value`.

  Raises:
    ValueError: If `dtype` does not match the element type of `value`.
  "
                :arguments 
                  ( ("value" variable nil (reparse-symbol function_parameters) [36116 36121])
                    ("dtype" variable nil (reparse-symbol function_parameters) [36172 36177])
                    ("name" variable nil (reparse-symbol function_parameters) [36233 36237])
                    ("as_ref" variable nil (reparse-symbol function_parameters) [36293 36299]))                  )
                nil [36067 37457])
            ("internal_convert_n_to_tensor_or_indexed_slices" function
               (:documentation "Converts `values` to a list of `Tensor` or `IndexedSlices` objects.

  Any `IndexedSlices` or `SparseTensor` objects in `values` are returned
  unmodified.

  Args:
    values: A list of `None`, `IndexedSlices`, `SparseTensor`, or objects that
      can be consumed by `convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor`
      `IndexedSlices`.
    name: (Optional.) A name prefix to used when a new `Tensor` is
      created, in which case element `i` will be given the name `name
      + '_' + i`.
    as_ref: True if the caller wants the results as ref tensors.

  Returns:
    A list of `Tensor`, `IndexedSlices`, and/or `SparseTensor` objects.

  Raises:
    TypeError: If no conversion function is registered for an element in
      `values`.
    RuntimeError: If a registered conversion function returns an invalid
      value.
  "
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [37510 37516])
                    ("dtype" variable nil (reparse-symbol function_parameters) [37569 37574])
                    ("name" variable nil (reparse-symbol function_parameters) [37632 37636])
                    ("as_ref" variable nil (reparse-symbol function_parameters) [37694 37700]))                  )
                nil [37459 38996])
            ("convert_n_to_tensor_or_indexed_slices" function
               (:documentation "Converts `values` to a list of `Output` or `IndexedSlices` objects.

  Any `IndexedSlices` or `SparseTensor` objects in `values` are returned
  unmodified.

  Args:
    values: A list of `None`, `IndexedSlices`, `SparseTensor`, or objects that
      can be consumed by `convert_to_tensor()`.
    dtype: (Optional.) The required `DType` of the returned `Tensor`
      `IndexedSlices`.
    name: (Optional.) A name prefix to used when a new `Tensor` is
      created, in which case element `i` will be given the name `name
      + '_' + i`.

  Returns:
    A list of `Tensor`, `IndexedSlices`, and/or `SparseTensor` objects.

  Raises:
    TypeError: If no conversion function is registered for an element in
      `values`.
    RuntimeError: If a registered conversion function returns an invalid
      value.
  "
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [39040 39046])
                    ("dtype" variable nil (reparse-symbol function_parameters) [39048 39053])
                    ("name" variable nil (reparse-symbol function_parameters) [39060 39064]))                  )
                nil [38998 40008])
            ("register_tensor_conversion_function" function
               (:documentation "Registers a function for converting objects of `base_type` to `Tensor`.

  The conversion function must have the following signature:

  ```python
      def conversion_func(value, dtype=None, name=None, as_ref=False):
        # ...
  ```

  It must return a `Tensor` with the given `dtype` if specified. If the
  conversion function creates a new `Tensor`, it should use the given
  `name` if specified. All exceptions will be propagated to the caller.

  The conversion function may return `NotImplemented` for some
  inputs. In this case, the conversion process will continue to try
  subsequent conversion functions.

  If `as_ref` is true, the function must return a `Tensor` reference,
  such as a `Variable`.

  NOTE: The conversion functions will execute in order of priority,
  followed by order of registration. To ensure that a conversion function
  `F` runs before another conversion function `G`, ensure that `F` is
  registered with a smaller priority than `G`.

  Args:
    base_type: The base type or tuple of base types for all objects that
      `conversion_func` accepts.
    conversion_func: A function that converts instances of `base_type` to
      `Tensor`.
    priority: Optional integer that indicates the priority for applying this
      conversion function. Conversion functions with smaller priority values
      run earlier than conversion functions with larger priority values.
      Defaults to 100.

  Raises:
    TypeError: If the arguments do not have the appropriate type.

  "
                :arguments 
                  ( ("base_type" variable nil (reparse-symbol function_parameters) [40116 40125])
                    ("conversion_func" variable nil (reparse-symbol function_parameters) [40167 40182])
                    ("priority" variable nil (reparse-symbol function_parameters) [40224 40232]))                  )
                nil [40076 42447])
            ("IndexedSlices" type
               (:documentation "A sparse representation of a set of tensor slices at given indices.

  This class is a simple wrapper for a pair of `Tensor` objects:

  * `values`: A `Tensor` of any dtype with shape `[D0, D1, ..., Dn]`.
  * `indices`: A 1-D integer `Tensor` with shape `[D0]`.

  An `IndexedSlices` is typically used to represent a subset of a larger
  tensor `dense` of shape `[LARGE0, D1, .. , DN]` where `LARGE0 >> D0`.
  The values in `indices` are the indices in the first dimension of
  the slices that have been extracted from the larger tensor.

  The dense tensor `dense` represented by an `IndexedSlices` `slices` has

  ```python
  dense[slices.indices[i], :, :, :, ...] = slices.values[i, :, :, :, ...]
  ```

  The `IndexedSlices` class is used principally in the definition of
  gradients for operations that have sparse gradients
  (e.g. @{tf.gather}).

  Contrast this representation with
  @{tf.SparseTensor},
  which uses multi-dimensional indices and scalar values.
  "
                :superclasses ("_TensorLike")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Creates an `IndexedSlices`.\"\"\"" code nil (reparse-symbol indented_block_body) [43527 43560])
                            ("_get_graph_from_inputs" code nil (reparse-symbol indented_block_body) [43565 43619])
                            ("self" variable nil (reparse-symbol indented_block_body) [43624 43645])
                            ("self" variable nil (reparse-symbol indented_block_body) [43650 43673])
                            ("self" variable nil (reparse-symbol indented_block_body) [43678 43709]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43480 43484])
                            ("values" variable nil (reparse-symbol function_parameters) [43486 43492])
                            ("indices" variable nil (reparse-symbol function_parameters) [43494 43501])
                            ("dense_shape" variable nil (reparse-symbol function_parameters) [43503 43514]))                          
                        :documentation "Creates an `IndexedSlices`."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43467 43709])
                    ("values" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43735 43739]))                          
                        :documentation "A `Tensor` containing the values of the slices.")
                        (reparse-symbol indented_block_body) [43712 43824])
                    ("indices" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43851 43855]))                          
                        :documentation "A 1-D `Tensor` containing the indices of the slices.")
                        (reparse-symbol indented_block_body) [43827 43946])
                    ("dense_shape" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43977 43981]))                          
                        :documentation "A 1-D `Tensor` containing the shape of the corresponding dense tensor.")
                        (reparse-symbol indented_block_body) [43949 44094])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44118 44122]))                          
                        :documentation "The name of this `IndexedSlices`.")
                        (reparse-symbol indented_block_body) [44097 44197])
                    ("device" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44223 44227]))                          
                        :documentation "The name of the device on which `values` will be produced, or `None`.")
                        (reparse-symbol indented_block_body) [44200 44340])
                    ("op" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44362 44366]))                          
                        :documentation "The `Operation` that produces `values` as an output.")
                        (reparse-symbol indented_block_body) [44343 44458])
                    ("dtype" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44483 44487]))                          
                        :documentation "The `DType` of elements in this tensor.")
                        (reparse-symbol indented_block_body) [44461 44569])
                    ("graph" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44594 44598]))                          
                        :documentation "The `Graph` that contains the values, indices, and shape tensors.")
                        (reparse-symbol indented_block_body) [44572 44707])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44722 44726]))                          )
                        (reparse-symbol indented_block_body) [44710 44913])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44928 44932]))                          )
                        (reparse-symbol indented_block_body) [44916 45006]))                  
                :type "class")
                nil [42449 45006])
            ("IndexedSlicesValue" variable nil nil [45008 45116])
            ("_device_string" function (:arguments 
              ( ("dev_spec" variable nil (reparse-symbol function_parameters) [45138 45146]))              ) nil [45119 45254])
            ("_NodeDef" function
               (:documentation "Create a NodeDef proto.

  Args:
    op_type: Value for the \"op\" attribute of the NodeDef proto.
    name: Value for the \"name\" attribute of the NodeDef proto.
    device: string, device, or function from NodeDef to string.
      Value for the \"device\" attribute of the NodeDef proto.
    attrs: Optional dictionary where the key is the attribute name (a string)
      and the value is the respective \"attr\" attribute of the NodeDef proto (an
      AttrValue).

  Returns:
    A node_def_pb2.NodeDef protocol buffer.
  "
                :arguments 
                  ( ("op_type" variable nil (reparse-symbol function_parameters) [45269 45276])
                    ("name" variable nil (reparse-symbol function_parameters) [45278 45282])
                    ("device" variable nil (reparse-symbol function_parameters) [45284 45290])
                    ("attrs" variable nil (reparse-symbol function_parameters) [45297 45302]))                  )
                nil [45256 46258])
            ("_VALID_OP_NAME_REGEX" variable nil nil [46369 46438])
            ("_VALID_SCOPE_NAME_REGEX" variable nil nil [46439 46499])
            ("Operation" type
               (:documentation "Represents a graph node that performs computation on tensors.

  An `Operation` is a node in a TensorFlow `Graph` that takes zero or
  more `Tensor` objects as input, and produces zero or more `Tensor`
  objects as output. Objects of type `Operation` are created by
  calling a Python op constructor (such as
  @{tf.matmul})
  or @{tf.Graph.create_op}.

  For example `c = tf.matmul(a, b)` creates an `Operation` of type
  \"MatMul\" that takes tensors `a` and `b` as input, and produces `c`
  as output.

  After the graph has been launched in a session, an `Operation` can
  be executed by passing it to
  @{tf.Session.run}.
  `op.run()` is a shortcut for calling `tf.get_default_session().run(op)`.
  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"Creates an `Operation`.

    NOTE: This constructor validates the name of the `Operation` (passed
    as `node_def.name`). Valid `Operation` names match the following
    regular expression:

        [A-Za-z0-9.][A-Za-z0-9_.\\\\-/]*

    Args:
      node_def: `node_def_pb2.NodeDef`.  `NodeDef` for the `Operation`.
        Used for attributes of `node_def_pb2.NodeDef`, typically `name`,
        `op`, and `device`.  The `input` attribute is irrelevant here
        as it will be computed when generating the model.
      g: `Graph`. The parent graph.
      inputs: list of `Tensor` objects. The inputs to this `Operation`.
      output_types: list of `DType` objects.  List of the types of the
        `Tensors` computed by this operation.  The length of this list indicates
        the number of output endpoints of the `Operation`.
      control_inputs: list of operations or tensors from which to have a
        control dependency.
      input_types: List of `DType` objects representing the
        types of the tensors accepted by the `Operation`.  By default
        uses `[x.dtype.base_dtype for x in inputs]`.  Operations that expect
        reference-typed inputs must specify these explicitly.
      original_op: Optional. Used to associate the new `Operation` with an
        existing `Operation` (for example, a replica with the op that was
        replicated).
      op_def: Optional. The `op_def_pb2.OpDef` proto that describes the
        op type that this `Operation` represents.

    Raises:
      TypeError: if control inputs are not Operations or Tensors,
        or if `node_def` is not a `NodeDef`,
        or if `g` is not a `Graph`,
        or if `inputs` are not tensors,
        or if `inputs` and `input_types` are incompatible.
      ValueError: if the `node_def` name is not valid.
    \"\"\"" code nil (reparse-symbol indented_block_body) [47501 49322])
                            ("if" code nil (reparse-symbol indented_block_body) [49327 49449])
                            ("if" code nil (reparse-symbol indented_block_body) [49453 49617])
                            ("if" code nil (reparse-symbol indented_block_body) [49621 49743])
                            ("if" code nil (reparse-symbol indented_block_body) [49747 49831])
                            ("self" variable nil (reparse-symbol indented_block_body) [49835 49875])
                            ("self" variable nil (reparse-symbol indented_block_body) [49880 49895])
                            ("if" code nil (reparse-symbol indented_block_body) [49900 50051])
                            ("self" variable nil (reparse-symbol indented_block_body) [50055 50082])
                            ("for" code nil (reparse-symbol indented_block_body) [50106 50332])
                            ("if" code nil (reparse-symbol indented_block_body) [50336 50385])
                            ("self" variable nil (reparse-symbol indented_block_body) [50389 50426])
                            ("self" variable nil (reparse-symbol indented_block_body) [50431 50545])
                            ("if" code nil (reparse-symbol indented_block_body) [50550 51005])
                            ("self" variable nil (reparse-symbol indented_block_body) [51009 51044])
                            ("self" variable nil (reparse-symbol indented_block_body) [51090 51115])
                            ("if" code nil (reparse-symbol indented_block_body) [51120 51506])
                            ("self" variable nil (reparse-symbol indented_block_body) [51511 51542])
                            ("self" variable nil (reparse-symbol indented_block_body) [51547 51568])
                            ("self" variable nil (reparse-symbol indented_block_body) [51573 51619])
                            ("self" variable nil (reparse-symbol indented_block_body) [51814 51831])
                            ("self" variable nil (reparse-symbol indented_block_body) [51891 51949])
                            ("if" code nil (reparse-symbol indented_block_body) [51990 52443])
                            ("self" variable nil (reparse-symbol indented_block_body) [52775 52814])
                            ("self" code nil (reparse-symbol indented_block_body) [52855 52881])
                            ("if" code nil (reparse-symbol indented_block_body) [52887 53483]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47254 47258])
                            ("node_def" variable nil (reparse-symbol function_parameters) [47275 47283])
                            ("g" variable nil (reparse-symbol function_parameters) [47300 47301])
                            ("inputs" variable nil (reparse-symbol function_parameters) [47318 47324])
                            ("output_types" variable nil (reparse-symbol function_parameters) [47346 47358])
                            ("control_inputs" variable nil (reparse-symbol function_parameters) [47380 47394])
                            ("input_types" variable nil (reparse-symbol function_parameters) [47416 47427])
                            ("original_op" variable nil (reparse-symbol function_parameters) [47449 47460])
                            ("op_def" variable nil (reparse-symbol function_parameters) [47482 47488]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [47241 53482])
                    ("_create_c_op" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53502 53506])
                            ("graph" variable nil (reparse-symbol function_parameters) [53508 53513])
                            ("node_def" variable nil (reparse-symbol function_parameters) [53515 53523])
                            ("inputs" variable nil (reparse-symbol function_parameters) [53525 53531])
                            ("control_inputs" variable nil (reparse-symbol function_parameters) [53533 53547]))                          
                        :documentation "Creates a TF_Operation.

    Args:
      graph: a `Graph`.
      node_def: `node_def_pb2.NodeDef` for the operation to create.
      inputs: A list of `Tensor`s (corresponding to scalar inputs) and lists of
        `Tensor`s (corresponding to sequence inputs, e.g. \"int64 * N\",
        \"list(int64)\"). The length of the list should be equal to the number of
        inputs specified by this operation's op def.
      control_inputs: A list of `Operation`s to set as control dependencies.

    Returns:
      A wrapped TF_Operation*.
    ")
                        (reparse-symbol indented_block_body) [53485 55322])
                    ("_reconstruct_sequence_inputs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [55358 55362])
                            ("op_def" variable nil (reparse-symbol function_parameters) [55364 55370])
                            ("inputs" variable nil (reparse-symbol function_parameters) [55372 55378])
                            ("attrs" variable nil (reparse-symbol function_parameters) [55380 55385]))                          
                        :documentation "Regroups a flat list of input tensors into scalar and sequence inputs.

    Args:
      op_def: The `op_def_pb2.OpDef` (for knowing the input types)
      inputs: a list of input `Tensor`s to the op.
      attrs: mapping from attr name to `attr_value_pb2.AttrValue` (these define
        how long each sequence is)

    Returns:
      A list of `Tensor`s (corresponding to scalar inputs) and lists of
      `Tensor`s (corresponding to sequence inputs).
    ")
                        (reparse-symbol indented_block_body) [55325 56439])
                    ("colocation_groups" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56464 56468]))                          
                        :documentation "Returns the list of colocation groups of the op.")
                        (reparse-symbol indented_block_body) [56442 57131])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57145 57149]))                          
                        :documentation "DEPRECATED: Use outputs.")
                        (reparse-symbol indented_block_body) [57134 57218])
                    ("_get_control_flow_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57251 57255]))                          
                        :documentation "Returns the control flow context of this op.

    Returns:
      A context object.
    ")
                        (reparse-symbol indented_block_body) [57221 57394])
                    ("_set_control_flow_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57427 57431])
                            ("ctx" variable nil (reparse-symbol function_parameters) [57433 57436]))                          
                        :documentation "Sets the current control flow context of this op.

    Args:
      ctx: a context object.
    ")
                        (reparse-symbol indented_block_body) [57397 57581])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57605 57609]))                          
                        :documentation "The full name of this operation.")
                        (reparse-symbol indented_block_body) [57584 57952])
                    ("_id" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57975 57979]))                          
                        :documentation "The unique integer id of this operation.")
                        (reparse-symbol indented_block_body) [57955 58059])
                    ("device" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58085 58089]))                          
                        :documentation "The name of the device to which this op has been assigned, if any.

    Returns:
      The string name of the device to which this op has been
      assigned, or an empty string if it has not been assigned to a
      device.
    ")
                        (reparse-symbol indented_block_body) [58062 58636])
                    ("_output_types" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58669 58673]))                          
                        :documentation "List this operation's output types.

    Returns:
      List of the types of the Tensors computed by this operation.
      Each element in the list is an integer whose value is one of
      the TF_DataType enums defined in c_api.h
      The length of this list indicates the number of output endpoints
      of the operation.
    ")
                        (reparse-symbol indented_block_body) [58639 59822])
                    ("_tf_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59840 59844])
                            ("output_idx" variable nil (reparse-symbol function_parameters) [59846 59856]))                          
                        :documentation "Create and return a new TF_Output for output_idx'th output of this op.")
                        (reparse-symbol indented_block_body) [59825 60082])
                    ("_tf_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60099 60103])
                            ("input_idx" variable nil (reparse-symbol function_parameters) [60105 60114]))                          
                        :documentation "Create and return a new TF_Input for input_idx'th input of this op.")
                        (reparse-symbol indented_block_body) [60085 60331])
                    ("_set_device" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60350 60354])
                            ("device" variable nil (reparse-symbol function_parameters) [60356 60362]))                          
                        :documentation "Set the device of this operation.

    Args:
      device: string or device..  The device to set.
    ")
                        (reparse-symbol indented_block_body) [60334 60839])
                    ("_add_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [60857 60861])
                            ("tensor" variable nil (reparse-symbol function_parameters) [60863 60869])
                            ("dtype" variable nil (reparse-symbol function_parameters) [60871 60876]))                          
                        :documentation "Add a new input to this operation.

    Args:
      tensor: the Tensor to add as an input.
      dtype: tf.DType: type of the input; defaults to
        the tensor's dtype.

    Raises:
      TypeError: if tensor is not a Tensor,
        or if input tensor type is not convertible to dtype.
      ValueError: if the Tensor is from a different graph.
    ")
                        (reparse-symbol indented_block_body) [60842 61935])
                    ("_update_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61956 61960])
                            ("index" variable nil (reparse-symbol function_parameters) [61962 61967])
                            ("tensor" variable nil (reparse-symbol function_parameters) [61969 61975])
                            ("dtype" variable nil (reparse-symbol function_parameters) [61977 61982]))                          
                        :documentation "Update the input to this operation at the given index.

    NOTE: This is for TF internal use only. Please don't use it.

    Args:
      index: the index of the input to update.
      tensor: the Tensor to be used as the input at the given index.
      dtype: tf.DType: type of the input; defaults to
        the tensor's dtype.

    Raises:
      TypeError: if tensor is not a Tensor,
        or if input tensor type is not convertible to dtype.
      ValueError: if the Tensor is from a different graph.
    ")
                        (reparse-symbol indented_block_body) [61938 63506])
                    ("_add_control_inputs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63533 63537])
                            ("ops" variable nil (reparse-symbol function_parameters) [63539 63542]))                          
                        :documentation "Add a list of new control inputs to this operation.

    Args:
      ops: the list of Operations to add as control input.

    Raises:
      TypeError: if ops is not a list of Operations.
      ValueError: if any op in ops is from a different graph.
    ")
                        (reparse-symbol indented_block_body) [63509 64151])
                    ("_add_control_input" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64177 64181])
                            ("op" variable nil (reparse-symbol function_parameters) [64183 64185]))                          
                        :documentation "Add a new control input to this operation.

    Args:
      op: the Operation to add as control input.

    Raises:
      TypeError: if op is not an Operation.
      ValueError: if op is from a different graph.
    ")
                        (reparse-symbol indented_block_body) [64154 64588])
                    ("_recompute_node_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64685 64689]))                          )
                        (reparse-symbol indented_block_body) [64661 65005])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65020 65024]))                          )
                        (reparse-symbol indented_block_body) [65008 65058])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65074 65078]))                          )
                        (reparse-symbol indented_block_body) [65061 65147])
                    ("outputs" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65174 65178]))                          
                        :documentation "The list of `Tensor` objects representing the outputs of this op.")
                        (reparse-symbol indented_block_body) [65150 65282])
                    ("_InputList" type
                       (:documentation "Immutable input list wrapper."
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("self" variable nil (reparse-symbol indented_block_body) [65423 65436]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65405 65409])
                                    ("op" variable nil (reparse-symbol function_parameters) [65411 65413]))                                  
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [65392 65436])
                            ("__iter__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65454 65458]))                                  )
                                (reparse-symbol indented_block_body) [65441 65497])
                            ("__len__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65514 65518]))                                  )
                                (reparse-symbol indented_block_body) [65502 65556])
                            ("__bool__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65574 65578]))                                  )
                                (reparse-symbol indented_block_body) [65561 65617])
                            ("__nonzero__" variable nil (reparse-symbol indented_block_body) [65682 65704])
                            ("__getitem__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [65726 65730])
                                    ("i" variable nil (reparse-symbol function_parameters) [65732 65733]))                                  )
                                (reparse-symbol indented_block_body) [65710 65769]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [65321 65769])
                    ("inputs" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65830 65834]))                          
                        :documentation "The list of `Tensor` objects representing the data inputs of this op.")
                        (reparse-symbol indented_block_body) [65807 66227])
                    ("_input_dtypes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66260 66264]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66230 66296])
                    ("_input_types" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66328 66332]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [66299 66791])
                    ("control_inputs" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66825 66829]))                          
                        :documentation "The `Operation` objects on which this op has a control dependency.

    Before this op is executed, TensorFlow will ensure that the
    operations in `self.control_inputs` have finished executing. This
    mechanism can be used to run ops sequentially for performance
    reasons, or to ensure that the side effects of an op are observed
    in the correct order.

    Returns:
      A list of `Operation` objects.

    ")
                        (reparse-symbol indented_block_body) [66794 67629])
                    ("type" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67653 67657]))                          
                        :documentation "The type of the op (e.g. `\"MatMul\"`).")
                        (reparse-symbol indented_block_body) [67632 68279])
                    ("graph" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68304 68308]))                          
                        :documentation "The `Graph` that contains this operation.")
                        (reparse-symbol indented_block_body) [68282 68386])
                    ("node_def" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68414 68418]))                          
                        :documentation "Returns a serialized `NodeDef` representation of this operation.

    Returns:
      A
      [`NodeDef`](https://www.tensorflow.org/code/tensorflow/core/framework/node_def.proto)
      protocol buffer.
    ")
                        (reparse-symbol indented_block_body) [68389 68735])
                    ("op_def" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [68761 68765]))                          
                        :documentation "Returns the `OpDef` proto that represents the type of this op.

    Returns:
      An
      [`OpDef`](https://www.tensorflow.org/code/tensorflow/core/framework/op_def.proto)
      protocol buffer.
    ")
                        (reparse-symbol indented_block_body) [68738 69075])
                    ("traceback" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69104 69108]))                          
                        :documentation "Returns the call stack from when this operation was constructed.")
                        (reparse-symbol indented_block_body) [69078 69277])
                    ("traceback_with_start_lines" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69323 69327]))                          
                        :documentation "Same as traceback but includes start line of function definition.

    Returns:
      A list of 5-tuples (filename, lineno, name, code, func_start_lineno).
    ")
                        (reparse-symbol indented_block_body) [69280 69641])
                    ("get_attr" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [69657 69661])
                            ("name" variable nil (reparse-symbol function_parameters) [69663 69667]))                          
                        :documentation "Returns the value of the attr of this op with the given `name`.

    Args:
      name: The name of the attr to fetch.

    Returns:
      The value of the attr, as a Python object.

    Raises:
      ValueError: If this op does not have an attr with the given `name`.
    ")
                        (reparse-symbol indented_block_body) [69644 70777])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70788 70792])
                            ("feed_dict" variable nil (reparse-symbol function_parameters) [70794 70803])
                            ("session" variable nil (reparse-symbol function_parameters) [70810 70817]))                          
                        :documentation "Runs this operation in a `Session`.

    Calling this method will execute all preceding operations that
    produce the inputs needed for this operation.

    *N.B.* Before invoking `Operation.run()`, its graph must have been
    launched in a session, and either a default session must be
    available, or `session` must be specified explicitly.

    Args:
      feed_dict: A dictionary that maps `Tensor` objects to feed values.
        See @{tf.Session.run}
        for a description of the valid feed values.
      session: (Optional.) The `Session` to be used to run to this operation. If
        none, the default session will be used.
    ")
                        (reparse-symbol indented_block_body) [70780 71552]))                  
                :type "class")
                nil [46502 71552])
            ("_gradient_registry" variable nil nil [71553 71603])
            ("RegisterGradient" type
               (:documentation "A decorator for registering the gradient function for an op type.

  This decorator is only used when defining a new op type. For an op
  with `m` inputs and `n` outputs, the gradient function is a function
  that takes the original `Operation` and `n` `Tensor` objects
  (representing the gradients with respect to each output of the op),
  and returns `m` `Tensor` objects (representing the partial gradients
  with respect to each input of the op).

  For example, assuming that operations of type `\"Sub\"` take two
  inputs `x` and `y`, and return a single output `x - y`, the
  following gradient function would be registered:

  ```python
  @tf.RegisterGradient(\"Sub\")
  def _sub_grad(unused_op, grad):
    return grad, tf.negative(grad)
  ```

  The decorator argument `op_type` is the string type of an
  operation. This corresponds to the `OpDef.name` field for the proto
  that defines the operation.
  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Creates a new decorator with `op_type` as the Operation type.

    Args:
      op_type: The string type of an operation. This corresponds to the
        `OpDef.name` field for the proto that defines the operation.
    \"\"\"" code nil (reparse-symbol indented_block_body) [72596 72820])
                            ("if" code nil (reparse-symbol indented_block_body) [72825 72921])
                            ("self" variable nil (reparse-symbol indented_block_body) [72925 72948]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72575 72579])
                            ("op_type" variable nil (reparse-symbol function_parameters) [72581 72588]))                          
                        :documentation "Creates a new decorator with `op_type` as the Operation type.

    Args:
      op_type: The string type of an operation. This corresponds to the
        `OpDef.name` field for the proto that defines the operation.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [72562 72948])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72964 72968])
                            ("f" variable nil (reparse-symbol function_parameters) [72970 72971]))                          
                        :documentation "Registers the function `f` as gradient function for `op_type`.")
                        (reparse-symbol indented_block_body) [72951 73110]))                  
                :type "class")
                nil [71606 73110])
            ("NotDifferentiable" function
               (:documentation "Specifies that ops of type `op_type` is not differentiable.

  This function should *not* be used for operations that have a
  well-defined gradient that is not yet implemented.

  This function is only used when defining a new op type. It may be
  used for ops such as `tf.size()` that are not differentiable.  For
  example:

  ```python
  tf.NotDifferentiable(\"Size\")
  ```

  The gradient computed for 'op_type' will then propagate zeros.

  For ops that have a well-defined gradient but are not yet implemented,
  no declaration should be made, and an error *must* be thrown if
  an attempt to request its gradient is made.

  Args:
    op_type: The string type of an operation. This corresponds to the
      `OpDef.name` field for the proto that defines the operation.

  Raises:
    TypeError: If `op_type` is not a string.

  "
                :arguments 
                  ( ("op_type" variable nil (reparse-symbol function_parameters) [73134 73141]))                  )
                nil [73112 74128])
            ("NoGradient" variable nil nil [74184 74214])
            ("get_gradient_function" function
               (:documentation "Returns the function that computes gradients for \"op\"."
                :arguments 
                  ( ("op" variable nil (reparse-symbol function_parameters) [74243 74245]))                  )
                nil [74217 74488])
            ("_shape_registry" variable nil nil [74490 74544])
            ("_default_shape_function_registry" variable nil nil [74545 74624])
            ("_call_cpp_shape_fn" variable nil nil [74792 74817])
            ("_call_cpp_shape_fn_and_require_op" variable nil nil [74818 74858])
            ("_set_call_cpp_shape_fn" function
               (:documentation "Sets default shape fns from passed common_shapes.call_cpp_shape_fn."
                :arguments 
                  ( ("call_cpp_shape_fn" variable nil (reparse-symbol function_parameters) [74888 74905]))                  )
                nil [74861 75391])
            ("RegisterShape" type
               (:documentation "No longer used.  Was: A decorator for registering a shape function.

  Shape functions must now be registered via the SetShapeFn on the
  original Op specification in C++.

  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Saves the `op_type` as the `Operation` type.\"\"\"" code nil (reparse-symbol indented_block_body) [75643 75693])
                            ("if" code nil (reparse-symbol indented_block_body) [75698 75794])
                            ("self" variable nil (reparse-symbol indented_block_body) [75798 75821]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75622 75626])
                            ("op_type" variable nil (reparse-symbol function_parameters) [75628 75635]))                          
                        :documentation "Saves the `op_type` as the `Operation` type."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [75609 75821])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75837 75841])
                            ("f" variable nil (reparse-symbol function_parameters) [75843 75844]))                          
                        :documentation "Registers \"f\" as the shape function for \"op_type\".")
                        (reparse-symbol indented_block_body) [75824 76566]))                  
                :type "class")
                nil [75393 76566])
            ("set_shapes_for_outputs" function
               (:documentation "Uses the registered shape functions to set the shapes for op's outputs."
                :arguments 
                  ( ("op" variable nil (reparse-symbol function_parameters) [76595 76597]))                  )
                nil [76568 77695])
            ("OpStats" type
               (:documentation "A holder for statistics about an operator.

  This class holds information about the resource requirements for an op,
  including the size of its weight parameters on-disk and how many FLOPS it
  requires to execute forward inference.

  If you define a new operation, you can create a function that will return a
  set of information about its usage of the CPU and disk space when serialized.
  The function itself takes a Graph object that's been set up so you can call
  methods like get_tensor_by_name to help calculate the results, and a NodeDef
  argument.

  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Sets up the initial placeholders for the statistics.\"\"\"" code nil (reparse-symbol indented_block_body) [78351 78409])
                            ("self" variable nil (reparse-symbol indented_block_body) [78414 78450])
                            ("self" variable nil (reparse-symbol indented_block_body) [78455 78473]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78311 78315])
                            ("statistic_type" variable nil (reparse-symbol function_parameters) [78317 78331])
                            ("value" variable nil (reparse-symbol function_parameters) [78333 78338]))                          
                        :documentation "Sets up the initial placeholders for the statistics."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [78298 78473])
                    ("statistic_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78507 78511]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [78476 78546])
                    ("statistic_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78593 78597])
                            ("statistic_type" variable nil (reparse-symbol function_parameters) [78599 78613]))                          
                        :decorators 
                          ( ("statistic_type.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [78549 78658])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78683 78687]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [78661 78713])
                    ("value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78742 78746])
                            ("value" variable nil (reparse-symbol function_parameters) [78748 78753]))                          
                        :decorators 
                          ( ("value.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [78716 78780])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78796 78800])
                            ("other" variable nil (reparse-symbol function_parameters) [78802 78807]))                          )
                        (reparse-symbol indented_block_body) [78783 79143]))                  
                :type "class")
                nil [77697 79143])
            ("_stats_registry" variable nil nil [79145 79205])
            ("RegisterStatistics" type
               (:documentation "A decorator for registering the statistics function for an op type.

  This decorator can be defined for an op type so that it gives a
  report on the resources used by an instance of an operator, in the
  form of an OpStats object.

  Well-known types of statistics include these so far:

  - flops: When running a graph, the bulk of the computation happens doing
    numerical calculations like matrix multiplications. This type allows a node
    to return how many floating-point operations it takes to complete. The
    total number of FLOPs for a graph is a good guide to its expected latency.

  You can add your own statistics just by picking a new type string, registering
  functions for the ops you care about, and then calling get_stats_for_node_def.

  If a statistic for an op is registered multiple times, a KeyError will be
  raised.

  Since the statistics is counted on a per-op basis. It is not suitable for
  model parameters (capacity), which is expected to be counted only once, even
  if it is shared by multiple ops. (e.g. RNN)

  For example, you can define a new metric called doohickey for a Foo operation
  by placing this in your code:

  ```python
  @ops.RegisterStatistics(\"Foo\", \"doohickey\")
  def _calc_foo_bojangles(unused_graph, unused_node_def):
    return ops.OpStats(\"doohickey\", 20)
  ```

  Then in client code you can retrieve the value by making this call:

  ```python
  doohickey = ops.get_stats_for_node_def(graph, node_def, \"doohickey\")
  ```

  If the NodeDef is for an op with a registered doohickey function, you'll get
  back the calculated amount in doohickey.value, or None if it's not defined.

  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Saves the `op_type` as the `Operation` type.\"\"\"" code nil (reparse-symbol indented_block_body) [80953 81003])
                            ("if" code nil (reparse-symbol indented_block_body) [81008 81105])
                            ("if" code nil (reparse-symbol indented_block_body) [81109 81187])
                            ("self" variable nil (reparse-symbol indented_block_body) [81191 81214])
                            ("if" code nil (reparse-symbol indented_block_body) [81219 81330])
                            ("if" code nil (reparse-symbol indented_block_body) [81334 81426])
                            ("self" variable nil (reparse-symbol indented_block_body) [81430 81467]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80916 80920])
                            ("op_type" variable nil (reparse-symbol function_parameters) [80922 80929])
                            ("statistic_type" variable nil (reparse-symbol function_parameters) [80931 80945]))                          
                        :documentation "Saves the `op_type` as the `Operation` type."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [80903 81467])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [81483 81487])
                            ("f" variable nil (reparse-symbol function_parameters) [81489 81490]))                          
                        :documentation "Registers \"f\" as the statistics function for \"op_type\".")
                        (reparse-symbol indented_block_body) [81470 81648]))                  
                :type "class")
                nil [79208 81648])
            ("get_stats_for_node_def" function
               (:documentation "Looks up the node's statistics function in the registry and calls it.

  This function takes a Graph object and a NodeDef from a GraphDef, and if
  there's an associated statistics method, calls it and returns a result. If no
  function has been registered for the particular node type, it returns an empty
  statistics object.

  Args:
    graph: A Graph object that's been set up with the node's graph.
    node: A NodeDef describing the operator.
    statistic_type: A string identifying the statistic we're interested in.
  Returns:
    An OpStats object containing information about resource usage.
  "
                :arguments 
                  ( ("graph" variable nil (reparse-symbol function_parameters) [81677 81682])
                    ("node" variable nil (reparse-symbol function_parameters) [81684 81688])
                    ("statistic_type" variable nil (reparse-symbol function_parameters) [81690 81704]))                  )
                nil [81650 82514])
            ("_name_from_scope_name" function
               (:documentation "Returns the name of an op given the name of its scope.

  Args:
    name: the name of the scope.

  Returns:
    the name of the op (equal to scope name minus any trailing slash).
  "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [82542 82546]))                  )
                nil [82516 82799])
            ("Graph" type
               (:documentation "A TensorFlow computation, represented as a dataflow graph.

  A `Graph` contains a set of
  @{tf.Operation} objects,
  which represent units of computation; and
  @{tf.Tensor} objects, which represent
  the units of data that flow between operations.

  A default `Graph` is always registered, and accessible by calling
  @{tf.get_default_graph}.
  To add an operation to the default graph, simply call one of the functions
  that defines a new `Operation`:

  ```python
  c = tf.constant(4.0)
  assert c.graph is tf.get_default_graph()
  ```

  Another typical usage involves the
  @{tf.Graph.as_default}
  context manager, which overrides the current default graph for the
  lifetime of the context:

  ```python
  g = tf.Graph()
  with g.as_default():
    # Define operations and tensors in `g`.
    c = tf.constant(30.0)
    assert c.graph is g
  ```

  Important note: This class *is not* thread-safe for graph construction. All
  operations should be created from a single thread, or external
  synchronization must be provided. Unless otherwise specified, all methods
  are not thread-safe.

  A `Graph` instance supports an arbitrary number of \"collections\"
  that are identified by name. For convenience when building a large
  graph, collections can store groups of related objects: for
  example, the `tf.Variable` uses a collection (named
  @{tf.GraphKeys.GLOBAL_VARIABLES}) for
  all variables that are created during the construction of a graph. The caller
  may define additional collections by specifying a new name.
  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Creates a new, empty Graph.\"\"\"" code nil (reparse-symbol indented_block_body) [84394 84427])
                            ("self" variable nil (reparse-symbol indented_block_body) [84973 85002])
                            ("self" variable nil (reparse-symbol indented_block_body) [85007 85033])
                            ("self" variable nil (reparse-symbol indented_block_body) [85064 85089])
                            ("self" variable nil (reparse-symbol indented_block_body) [85120 85148])
                            ("self" variable nil (reparse-symbol indented_block_body) [85179 85196])
                            ("self" variable nil (reparse-symbol indented_block_body) [85270 85291])
                            ("self" variable nil (reparse-symbol indented_block_body) [85369 85392])
                            ("self" variable nil (reparse-symbol indented_block_body) [85475 85507])
                            ("self" variable nil (reparse-symbol indented_block_body) [85558 85590])
                            ("self" variable nil (reparse-symbol indented_block_body) [85719 85752])
                            ("self" variable nil (reparse-symbol indented_block_body) [85833 85870])
                            ("self" variable nil (reparse-symbol indented_block_body) [85915 85937])
                            ("self" variable nil (reparse-symbol indented_block_body) [85976 85993])
                            ("self" variable nil (reparse-symbol indented_block_body) [86066 86091])
                            ("self" variable nil (reparse-symbol indented_block_body) [86162 86195])
                            ("self" variable nil (reparse-symbol indented_block_body) [86303 86335])
                            ("self" variable nil (reparse-symbol indented_block_body) [86443 86466])
                            ("self" variable nil (reparse-symbol indented_block_body) [86508 86551])
                            ("self" variable nil (reparse-symbol indented_block_body) [86588 86746])
                            ("self" variable nil (reparse-symbol indented_block_body) [86751 86782])
                            ("self" variable nil (reparse-symbol indented_block_body) [86820 86847])
                            ("self" variable nil (reparse-symbol indented_block_body) [86901 86933])
                            ("self" variable nil (reparse-symbol indented_block_body) [86991 87020])
                            ("self" variable nil (reparse-symbol indented_block_body) [87083 87108])
                            ("self" variable nil (reparse-symbol indented_block_body) [87160 87185])
                            ("self" variable nil (reparse-symbol indented_block_body) [87237 87261])
                            ("self" variable nil (reparse-symbol indented_block_body) [87315 87341])
                            ("self" variable nil (reparse-symbol indented_block_body) [87372 87392])
                            ("self" variable nil (reparse-symbol indented_block_body) [87397 87456])
                            ("if" code nil (reparse-symbol indented_block_body) [87552 87667]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [84382 84386]))                          
                        :documentation "Creates a new, empty Graph."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [84369 87666])
                    ("_convert_stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87688 87692])
                            ("stack" variable nil (reparse-symbol function_parameters) [87694 87699])
                            ("include_func_start_lineno" variable nil (reparse-symbol function_parameters) [87701 87726]))                          
                        :documentation "Converts a stack extracted using _extract_stack() to a traceback stack.

    Args:
      stack: A list of n 5-tuples,
        (filename, lineno, name, frame_globals, func_start_lineno).
      include_func_start_lineno: True if function start line number should be
        included as the 5th entry in return tuples.

    Returns:
      A list of n 4-tuples or 5-tuples
      (filename, lineno, name, code, [optional: func_start_lineno]), where the
      code tuple element is calculated from the corresponding elements of the
      input tuple.
    ")
                        (reparse-symbol indented_block_body) [87669 88773])
                    ("_extract_stack" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88795 88799]))                          
                        :documentation "A lightweight, extensible re-implementation of traceback.extract_stack.

    NOTE(mrry): traceback.extract_stack eagerly retrieves the line of code for
      each stack frame using linecache, which results in an abundance of stat()
      calls. This implementation does not retrieve the code, and any consumer
      should apply _convert_stack to the result to obtain a traceback that can
      be formatted etc. using traceback methods.

    Derived classes can implement _extract_frame_info() to add extra information
    to the traceback.

    Returns:
      A list of 6-tuples
      (filename, lineno, name, frame_globals, func_start_lineno, custom_info)
      corresponding to the call stack of the current thread.
    ")
                        (reparse-symbol indented_block_body) [88776 90074])
                    ("_extract_frame_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90101 90105])
                            ("frame" variable nil (reparse-symbol function_parameters) [90107 90112]))                          
                        :documentation "Extracts custom information from a frame in an op traceback.")
                        (reparse-symbol indented_block_body) [90077 90237])
                    ("_check_not_finalized" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90265 90269]))                          
                        :documentation "Check if the graph is finalized.

    Raises:
      RuntimeError: If the graph finalized.
    ")
                        (reparse-symbol indented_block_body) [90240 90472])
                    ("_add_op" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90487 90491])
                            ("op" variable nil (reparse-symbol function_parameters) [90493 90495]))                          
                        :documentation "Adds 'op' to the graph.

    Args:
      op: the Operator or Tensor to add.

    Raises:
      TypeError: if op is not an Operation or Tensor.
      ValueError: if the op.name or op._id are already used.
    ")
                        (reparse-symbol indented_block_body) [90475 91380])
                    ("_c_graph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91448 91452]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [91423 91540])
                    ("version" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91567 91571]))                          
                        :documentation "Returns a version number that increases as ops are added to the graph.

    Note that this is unrelated to the
    @{tf.Graph.graph_def_versions}.

    Returns:
       An integer version that increases as ops are added to the graph.
    ")
                        (reparse-symbol indented_block_body) [91543 91922])
                    ("graph_def_versions" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [91960 91964]))                          
                        :documentation "The GraphDef version information of this graph.

    For details on the meaning of each version, see
    [`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto).

    Returns:
      A `VersionDef`.
    ")
                        (reparse-symbol indented_block_body) [91925 92315])
                    ("seed" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92339 92343]))                          
                        :documentation "The graph-level random seed of this graph.")
                        (reparse-symbol indented_block_body) [92318 92421])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92448 92452])
                            ("seed" variable nil (reparse-symbol function_parameters) [92454 92458]))                          
                        :decorators 
                          ( ("seed.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [92424 92483])
                    ("finalized" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92512 92516]))                          
                        :documentation "True if this graph has been finalized.")
                        (reparse-symbol indented_block_body) [92486 92595])
                    ("finalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92611 92615]))                          
                        :documentation "Finalizes this graph, making it read-only.

    After calling `g.finalize()`, no new operations can be added to
    `g`.  This method is used to ensure that no operations are added
    to a graph when it is shared between multiple threads, for example
    when using a @{tf.train.QueueRunner}.
    ")
                        (reparse-symbol indented_block_body) [92598 92954])
                    ("_unsafe_unfinalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [92980 92984]))                          
                        :documentation "Opposite of `finalize`. Internal interface.

    NOTE: Unfinalizing a graph could have negative impact on performance,
    especially in a multi-threaded environment.  Unfinalizing a graph
    when it is in use by a Session may lead to undefined behavior. Ensure
    that all sessions using a graph are closed before calling this method.
    ")
                        (reparse-symbol indented_block_body) [92957 93368])
                    ("_get_control_flow_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93401 93405]))                          
                        :documentation "Returns the current control flow context.

    Returns:
      A context object.
    ")
                        (reparse-symbol indented_block_body) [93371 93541])
                    ("_set_control_flow_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93574 93578])
                            ("ctx" variable nil (reparse-symbol function_parameters) [93580 93583]))                          
                        :documentation "Sets the current control flow context.

    Args:
      ctx: a context object.
    ")
                        (reparse-symbol indented_block_body) [93544 93717])
                    ("_as_graph_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [93738 93742])
                            ("from_version" variable nil (reparse-symbol function_parameters) [93744 93756])
                            ("add_shapes" variable nil (reparse-symbol function_parameters) [93763 93773]))                          
                        :documentation "Returns a serialized `GraphDef` representation of this graph.

    The serialized `GraphDef` can be imported into another `Graph`
    (using @{tf.import_graph_def}) or used with the
    [C++ Session API](../../../../api_docs/cc/index.md).

    This method is thread-safe.

    Args:
      from_version: Optional.  If this is set, returns a `GraphDef`
        containing only the nodes that were added to this graph since
        its `version` property had the given value.
      add_shapes: If true, adds an \"_output_shapes\" list attr to each
        node with the inferred shapes of each of its outputs.

    Returns:
      A tuple containing a
      [`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto)
      protocol buffer, and the version of the graph to which that
      `GraphDef` corresponds.

    Raises:
      ValueError: If the `graph_def` would be too large.

    ")
                        (reparse-symbol indented_block_body) [93720 96055])
                    ("as_graph_def" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96075 96079])
                            ("from_version" variable nil (reparse-symbol function_parameters) [96081 96093])
                            ("add_shapes" variable nil (reparse-symbol function_parameters) [96100 96110]))                          
                        :documentation "Returns a serialized `GraphDef` representation of this graph.

    The serialized `GraphDef` can be imported into another `Graph`
    (using @{tf.import_graph_def}) or used with the
    [C++ Session API](../../api_docs/cc/index.md).

    This method is thread-safe.

    Args:
      from_version: Optional.  If this is set, returns a `GraphDef`
        containing only the nodes that were added to this graph since
        its `version` property had the given value.
      add_shapes: If true, adds an \"_output_shapes\" list attr to each
        node with the inferred shapes of each of its outputs.

    Returns:
      A
      [`GraphDef`](https://www.tensorflow.org/code/tensorflow/core/framework/graph.proto)
      protocol buffer.

    Raises:
      ValueError: If the `graph_def` would be too large.
    ")
                        (reparse-symbol indented_block_body) [96058 97088])
                    ("_is_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97108 97112])
                            ("name" variable nil (reparse-symbol function_parameters) [97114 97118]))                          
                        :documentation "Tests whether 'name' is registered in this graph's function library.

    Args:
      name: string op name.
    Returns:
      bool indicating whether or not 'name' is registered in function library.
    ")
                        (reparse-symbol indented_block_body) [97091 97371])
                    ("_get_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97392 97396])
                            ("name" variable nil (reparse-symbol function_parameters) [97398 97402]))                          
                        :documentation "Returns the function definition for 'name'.

    Args:
      name: string function name.
    Returns:
      The function def proto.
    ")
                        (reparse-symbol indented_block_body) [97374 97595])
                    ("_add_function" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97616 97620])
                            ("function" variable nil (reparse-symbol function_parameters) [97622 97630]))                          
                        :documentation "Adds a function to the graph.

    After the function has been added, you can call to the function by
    passing the function name in place of an op name to
    `Graph.create_op()`.

    Args:
      function: A `_DefinedFunction` object.


    Raises:
      ValueError: if another function is defined with the same name.
    ")
                        (reparse-symbol indented_block_body) [97598 99621])
                    ("building_function" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99658 99662]))                          
                        :documentation "Returns True iff this graph represents a function.")
                        (reparse-symbol indented_block_body) [99624 99761])
                    ("create_op" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [99828 99832])
                            ("op_type" variable nil (reparse-symbol function_parameters) [99840 99847])
                            ("inputs" variable nil (reparse-symbol function_parameters) [99855 99861])
                            ("dtypes" variable nil (reparse-symbol function_parameters) [99869 99875])
                            ("input_types" variable nil (reparse-symbol function_parameters) [99923 99934])
                            ("name" variable nil (reparse-symbol function_parameters) [99947 99951])
                            ("attrs" variable nil (reparse-symbol function_parameters) [99964 99969])
                            ("op_def" variable nil (reparse-symbol function_parameters) [99982 99988])
                            ("compute_shapes" variable nil (reparse-symbol function_parameters) [100001 100015])
                            ("compute_device" variable nil (reparse-symbol function_parameters) [100028 100042]))                          
                        :documentation "Creates an `Operation` in this graph.

    This is a low-level interface for creating an `Operation`. Most
    programs will not call this method directly, and instead use the
    Python op constructors, such as `tf.constant()`, which add ops to
    the default graph.

    Args:
      op_type: The `Operation` type to create. This corresponds to the
        `OpDef.name` field for the proto that defines the operation.
      inputs: A list of `Tensor` objects that will be inputs to the `Operation`.
      dtypes: A list of `DType` objects that will be the types of the tensors
        that the operation produces.
      input_types: (Optional.) A list of `DType`s that will be the types of
        the tensors that the operation consumes. By default, uses the base
        `DType` of each input in `inputs`. Operations that expect
        reference-typed inputs must specify `input_types` explicitly.
      name: (Optional.) A string name for the operation. If not specified, a
        name is generated based on `op_type`.
      attrs: (Optional.) A dictionary where the key is the attribute name (a
        string) and the value is the respective `attr` attribute of the
        `NodeDef` proto that will represent the operation (an `AttrValue`
        proto).
      op_def: (Optional.) The `OpDef` proto that describes the `op_type` that
        the operation will have.
      compute_shapes: (Optional.) If True, shape inference will be performed
        to compute the shapes of the outputs.
      compute_device: (Optional.) If True, device functions will be executed
        to compute the device property of the Operation.

    Raises:
      TypeError: if any of the inputs is not a `Tensor`.
      ValueError: if colocation conflicts with existing device assignment.

    Returns:
      An `Operation` object.

    ")
                        (reparse-symbol indented_block_body) [99807 105840])
                    ("as_graph_element" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105864 105868])
                            ("obj" variable nil (reparse-symbol function_parameters) [105870 105873])
                            ("allow_tensor" variable nil (reparse-symbol function_parameters) [105875 105887])
                            ("allow_operation" variable nil (reparse-symbol function_parameters) [105894 105909]))                          
                        :documentation "Returns the object referred to by `obj`, as an `Operation` or `Tensor`.

    This function validates that `obj` represents an element of this
    graph, and gives an informative error message if it is not.

    This function is the canonical way to get/validate an object of
    one of the allowed types from an external argument reference in the
    Session API.

    This method may be called concurrently from multiple threads.

    Args:
      obj: A `Tensor`, an `Operation`, or the name of a tensor or operation.
        Can also be any object with an `_as_graph_element()` method that returns
        a value of one of these types.
      allow_tensor: If true, `obj` may refer to a `Tensor`.
      allow_operation: If true, `obj` may refer to an `Operation`.

    Returns:
      The `Tensor` or `Operation` in the Graph corresponding to `obj`.

    Raises:
      TypeError: If `obj` is not a type we support attempting to convert
        to types.
      ValueError: If `obj` is of an appropriate type but invalid. For
        example, an invalid string.
      KeyError: If `obj` is not an object in the graph.
    ")
                        (reparse-symbol indented_block_body) [105843 107253])
                    ("_as_graph_element_locked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [107285 107289])
                            ("obj" variable nil (reparse-symbol function_parameters) [107291 107294])
                            ("allow_tensor" variable nil (reparse-symbol function_parameters) [107296 107308])
                            ("allow_operation" variable nil (reparse-symbol function_parameters) [107310 107325]))                          
                        :documentation "See `Graph.as_graph_element()` for details.")
                        (reparse-symbol indented_block_body) [107256 111043])
                    ("get_operations" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111065 111069]))                          
                        :documentation "Return the list of operations in the graph.

    You can modify the operations in place, but modifications
    to the list such as inserts/delete have no effect on the
    list of operations known to the graph.

    This method may be called concurrently from multiple threads.

    Returns:
      A list of Operations.
    ")
                        (reparse-symbol indented_block_body) [111046 111545])
                    ("get_operation_by_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111574 111578])
                            ("name" variable nil (reparse-symbol function_parameters) [111580 111584]))                          
                        :documentation "Returns the `Operation` with the given `name`.

    This method may be called concurrently from multiple threads.

    Args:
      name: The name of the `Operation` to return.

    Returns:
      The `Operation` with the given `name`.

    Raises:
      TypeError: If `name` is not a string.
      KeyError: If `name` does not correspond to an operation in this graph.
    ")
                        (reparse-symbol indented_block_body) [111548 112219])
                    ("_get_operation_by_name_unsafe" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112256 112260])
                            ("name" variable nil (reparse-symbol function_parameters) [112262 112266]))                          
                        :documentation "Returns the `Operation` with the given `name`.

    This is a internal unsafe version of get_operation_by_name. It skips many
    checks and does not have user friedly error messages but runs considerably
    faster. This method may be called concurrently from multiple threads.

    Args:
      name: The name of the `Operation` to return.

    Returns:
      The `Operation` with the given `name`.

    Raises:
      KeyError: If `name` does not correspond to an operation in this graph.
    ")
                        (reparse-symbol indented_block_body) [112222 112899])
                    ("get_tensor_by_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112925 112929])
                            ("name" variable nil (reparse-symbol function_parameters) [112931 112935]))                          
                        :documentation "Returns the `Tensor` with the given `name`.

    This method may be called concurrently from multiple threads.

    Args:
      name: The name of the `Tensor` to return.

    Returns:
      The `Tensor` with the given `name`.

    Raises:
      TypeError: If `name` is not a string.
      KeyError: If `name` does not correspond to a tensor in this graph.
    ")
                        (reparse-symbol indented_block_body) [112902 113584])
                    ("_get_tensor_by_tf_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113616 113620])
                            ("tf_output" variable nil (reparse-symbol function_parameters) [113622 113631]))                          
                        :documentation "Returns the `Tensor` representing `tf_output`.

    Note that there is only one such `Tensor`, i.e. multiple calls to this
    function with the same TF_Output value will always return the same `Tensor`
    object.

    Args:
      tf_output: A wrapped `TF_Output` (the C API equivalent of `Tensor`).

    Returns:
      The `Tensor` that represents `tf_output`.
    ")
                        (reparse-symbol indented_block_body) [113587 114157])
                    ("_next_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114173 114177]))                          
                        :documentation "Id for next Operation instance. Also increments the internal id.")
                        (reparse-symbol indented_block_body) [114160 114376])
                    ("_last_id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114404 114408]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [114379 114444])
                    ("as_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114462 114466]))                          
                        :documentation "Returns a context manager that makes this `Graph` the default graph.

    This method should be used if you want to create multiple graphs
    in the same process. For convenience, a global default graph is
    provided, and all ops will be added to this graph if you do not
    create a new graph explicitly. Use this method with the `with` keyword
    to specify that ops created within the scope of a block should be
    added to this graph.

    The default graph is a property of the current thread. If you
    create a new thread, and wish to use the default graph in that
    thread, you must explicitly add a `with g.as_default():` in that
    thread's function.

    The following code examples are equivalent:

    ```python
    # 1. Using Graph.as_default():
    g = tf.Graph()
    with g.as_default():
      c = tf.constant(5.0)
      assert c.graph is g

    # 2. Constructing and making default:
    with tf.Graph().as_default() as g:
      c = tf.constant(5.0)
      assert c.graph is g
    ```

    Returns:
      A context manager for using this graph as the default graph.
    ")
                        (reparse-symbol indented_block_body) [114447 115628])
                    ("collections" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115659 115663]))                          
                        :documentation "Returns the names of the collections known to this graph.")
                        (reparse-symbol indented_block_body) [115631 115769])
                    ("add_to_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115794 115798])
                            ("name" variable nil (reparse-symbol function_parameters) [115800 115804])
                            ("value" variable nil (reparse-symbol function_parameters) [115806 115811]))                          
                        :documentation "Stores `value` in the collection with the given `name`.

    Note that collections are not sets, so it is possible to add a value to
    a collection several times.

    Args:
      name: The key for the collection. The `GraphKeys` class
        contains many standard names for collections.
      value: The value to add to the collection.
    ")
                        (reparse-symbol indented_block_body) [115772 116433])
                    ("add_to_collections" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116459 116463])
                            ("names" variable nil (reparse-symbol function_parameters) [116465 116470])
                            ("value" variable nil (reparse-symbol function_parameters) [116472 116477]))                          
                        :documentation "Stores `value` in the collections given by `names`.

    Note that collections are not sets, so it is possible to add a value to
    a collection several times. This function makes sure that duplicates in
    `names` are ignored, but it will not check for pre-existing membership of
    `value` in any of the collections in `names`.

    `names` can be any iterable, but if `names` is a string, it is treated as a
    single collection name.

    Args:
      names: The keys for the collections to add to. The `GraphKeys` class
        contains many standard names for collections.
      value: The value to add to the collections.
    ")
                        (reparse-symbol indented_block_body) [116436 117348])
                    ("get_collection_ref" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117374 117378])
                            ("name" variable nil (reparse-symbol function_parameters) [117380 117384]))                          
                        :documentation "Returns a list of values in the collection with the given `name`.

    If the collection exists, this returns the list itself, which can
    be modified in place to change the collection.  If the collection does
    not exist, it is created as an empty list and the list is returned.

    This is different from `get_collection()` which always returns a copy of
    the collection list if it exists and never creates an empty collection.

    Args:
      name: The key for the collection. For example, the `GraphKeys` class
        contains many standard names for collections.

    Returns:
      The list of values in the collection with the given `name`, or an empty
      list if no value has been added to that collection.
    ")
                        (reparse-symbol indented_block_body) [117351 118391])
                    ("get_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118413 118417])
                            ("name" variable nil (reparse-symbol function_parameters) [118419 118423])
                            ("scope" variable nil (reparse-symbol function_parameters) [118425 118430]))                          
                        :documentation "Returns a list of values in the collection with the given `name`.

    This is different from `get_collection_ref()` which always returns the
    actual collection list if it exists in that it returns a new list each time
    it is called.

    Args:
      name: The key for the collection. For example, the `GraphKeys` class
        contains many standard names for collections.
      scope: (Optional.) A string. If supplied, the resulting list is filtered
        to include only items whose `name` attribute matches `scope` using
        `re.match`. Items without a `name` attribute are never returned if a
        scope is supplied. The choice of `re.match` means that a `scope` without
        special tokens filters by prefix.

    Returns:
      The list of values in the collection with the given `name`, or
      an empty list if no value has been added to that collection. The
      list contains the values in the order under which they were
      collected.
    ")
                        (reparse-symbol indented_block_body) [118394 119871])
                    ("get_all_collection_keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [119902 119906]))                          
                        :documentation "Returns a list of collections used in this graph.")
                        (reparse-symbol indented_block_body) [119874 120069])
                    ("clear_collection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120093 120097])
                            ("name" variable nil (reparse-symbol function_parameters) [120099 120103]))                          
                        :documentation "Clears all values in a collection.

    Args:
      name: The key for the collection. The `GraphKeys` class contains many
        standard names for collections.
    ")
                        (reparse-symbol indented_block_body) [120072 120408])
                    ("_original_op" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120460 120464])
                            ("op" variable nil (reparse-symbol function_parameters) [120466 120468]))                          
                        :documentation "Python 'with' handler to help annotate ops with their originator.

    An op may have an 'original_op' property that indicates the op on which
    it was based. For example a replica op is based on the op that was
    replicated and a gradient op is based on the op that was differentiated.

    All ops created in the scope of this 'with' handler will have
    the given 'op' as their original op.

    Args:
      op: The Operation that all ops created in this scope will have as their
        original op.

    Yields:
      Nothing.
    ")
                        (reparse-symbol indented_block_body) [120411 121192])
                    ("name_scope" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121298 121302])
                            ("name" variable nil (reparse-symbol function_parameters) [121304 121308]))                          
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [121251 125426])
                    ("unique_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125501 125505])
                            ("name" variable nil (reparse-symbol function_parameters) [125507 125511])
                            ("mark_as_used" variable nil (reparse-symbol function_parameters) [125513 125525]))                          
                        :documentation "Return a unique operation name for `name`.

    Note: You rarely need to call `unique_name()` directly.  Most of
    the time you just need to create `with g.name_scope()` blocks to
    generate structured names.

    `unique_name` is used to generate structured names, separated by
    `\"/\"`, to help identify operations when debugging a graph.
    Operation names are displayed in error messages reported by the
    TensorFlow runtime, and in various visualization tools such as
    TensorBoard.

    If `mark_as_used` is set to `True`, which is the default, a new
    unique name is created and marked as in use. If it's set to `False`,
    the unique name is returned without actually being marked as used.
    This is useful when the caller simply wants to know what the name
    to be created will be.

    Args:
      name: The name for an operation.
      mark_as_used: Whether to mark this name as being used.

    Returns:
      A string to be passed to `create_op()` that will be used
      to name the operation being created.
    ")
                        (reparse-symbol indented_block_body) [125485 127159])
                    ("get_name_scope" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127181 127185]))                          
                        :documentation "Returns the current name scope.

    For example:

    ```python
    with tf.name_scope('scope1'):
      with tf.name_scope('scope2'):
        print(tf.get_default_graph().get_name_scope())
    ```
    would print the string `scope1/scope2`.

    Returns:
      A string representing the current name scope.
    ")
                        (reparse-symbol indented_block_body) [127162 127539])
                    ("colocate_with" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [127592 127596])
                            ("op" variable nil (reparse-symbol function_parameters) [127598 127600])
                            ("ignore_existing" variable nil (reparse-symbol function_parameters) [127602 127617]))                          
                        :documentation "Returns a context manager that specifies an op to colocate with.

    Note: this function is not for public use, only for internal libraries.

    For example:

    ```python
    a = tf.Variable([1.0])
    with g.colocate_with(a):
      b = tf.constant(1.0)
      c = tf.add(a, b)
    ```

    `b` and `c` will always be colocated with `a`, no matter where `a`
    is eventually placed.

    **NOTE** Using a colocation scope resets any existing device constraints.

    If `op` is `None` then `ignore_existing` must be `True` and the new
    scope resets all colocation and device constraints.

    Args:
      op: The op to colocate all created ops with, or `None`.
      ignore_existing: If true, only applies colocation of this op within
        the context, rather than applying all colocation properties
        on the stack.  If `op` is `None`, this value must be `True`.

    Raises:
      ValueError: if op is None but ignore_existing is False.

    Yields:
      A context manager that specifies the op with which to colocate
      newly created ops.

    ")
                        (reparse-symbol indented_block_body) [127542 129985])
                    ("device" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130031 130035])
                            ("device_name_or_function" variable nil (reparse-symbol function_parameters) [130037 130060]))                          
                        :documentation "Returns a context manager that specifies the default device to use.

    The `device_name_or_function` argument may either be a device name
    string, a device function, or None:

    * If it is a device name string, all operations constructed in
      this context will be assigned to the device with that name, unless
      overridden by a nested `device()` context.
    * If it is a function, it will be treated as a function from
      Operation objects to device name strings, and invoked each time
      a new Operation is created. The Operation will be assigned to
      the device with the returned name.
    * If it is None, all `device()` invocations from the enclosing context
      will be ignored.

    For information about the valid syntax of device name strings, see
    the documentation in
    [`DeviceNameUtils`](https://www.tensorflow.org/code/tensorflow/core/util/device_name_utils.h).

    For example:

    ```python
    with g.device('/device:GPU:0'):
      # All operations constructed in this context will be placed
      # on GPU 0.
      with g.device(None):
        # All operations constructed in this context will have no
        # assigned device.

    # Defines a function from `Operation` to device string.
    def matmul_on_gpu(n):
      if n.type == \"MatMul\":
        return \"/device:GPU:0\"
      else:
        return \"/cpu:0\"

    with g.device(matmul_on_gpu):
      # All operations of type \"MatMul\" constructed in this context
      # will be placed on GPU 0; all other operations will be placed
      # on CPU 0.
    ```

    **N.B.** The device scope may be overridden by op wrappers or
    other library code. For example, a variable assignment op
    `v.assign()` must be colocated with the `tf.Variable` `v`, and
    incompatible device scopes will be ignored.

    Args:
      device_name_or_function: The device name or function to use in
        the context.

    Yields:
      A context manager that specifies the default device to use for newly
      created ops.

    ")
                        (reparse-symbol indented_block_body) [129988 132519])
                    ("_apply_device_functions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132550 132554])
                            ("op" variable nil (reparse-symbol function_parameters) [132556 132558]))                          
                        :documentation "Applies the current device function stack to the given operation.")
                        (reparse-symbol indented_block_body) [132522 133112])
                    ("container" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133203 133207])
                            ("container_name" variable nil (reparse-symbol function_parameters) [133209 133223]))                          
                        :documentation "Returns a context manager that specifies the resource container to use.

    Stateful operations, such as variables and queues, can maintain their
    states on devices so that they can be shared by multiple processes.
    A resource container is a string name under which these stateful
    operations are tracked. These resources can be released or cleared
    with `tf.Session.reset()`.

    For example:

    ```python
    with g.container('experiment0'):
      # All stateful Operations constructed in this context will be placed
      # in resource container \"experiment0\".
      v1 = tf.Variable([1.0])
      v2 = tf.Variable([2.0])
      with g.container(\"experiment1\"):
        # All stateful Operations constructed in this context will be
        # placed in resource container \"experiment1\".
        v3 = tf.Variable([3.0])
        q1 = tf.FIFOQueue(10, tf.float32)
      # All stateful Operations constructed in this context will be
      # be created in the \"experiment0\".
      v4 = tf.Variable([4.0])
      q1 = tf.FIFOQueue(20, tf.float32)
      with g.container(\"\"):
        # All stateful Operations constructed in this context will be
        # be placed in the default resource container.
        v5 = tf.Variable([5.0])
        q3 = tf.FIFOQueue(30, tf.float32)

    # Resets container \"experiment0\", after which the state of v1, v2, v4, q1
    # will become undefined (such as uninitialized).
    tf.Session.reset(target, [\"experiment0\"])
    ```

    Args:
      container_name: container name string.

    Returns:
      A context manager for defining resource containers for stateful ops,
        yields the container name.
    ")
                        (reparse-symbol indented_block_body) [133157 135063])
                    ("_ControlDependenciesController" type
                       (:documentation "Context manager for `control_dependencies()`."
                        :superclasses ("object")
                        :members 
                          ( ("__init__" function
                               (:suite 
                                  ( ("\"\"\"Create a new `_ControlDependenciesController`.

      A `_ControlDependenciesController` is the context manager for
      `with tf.control_dependencies()` blocks.  These normally nest,
      as described in the documentation for `control_dependencies()`.

      The `control_inputs` argument list control dependencies that must be
      added to the current set of control dependencies.  Because of
      uniquification the set can be empty even if the caller passed a list of
      ops.  The special value `None` indicates that we want to start a new
      empty set of control dependencies instead of extending the current set.

      In that case we also clear the current control flow context, which is an
      additional mechanism to add control dependencies.

      Args:
        graph: The graph that this controller is managing.
        control_inputs: List of ops to use as control inputs in addition
          to the current control dependencies.  None to indicate that
          the dependencies should be cleared.
      \"\"\"" code nil (reparse-symbol indented_block_body) [135265 136304])
                                    ("self" variable nil (reparse-symbol indented_block_body) [136311 136330])
                                    ("if" code nil (reparse-symbol indented_block_body) [136337 136519])
                                    ("self" variable nil (reparse-symbol indented_block_body) [136525 136549])
                                    ("self" variable nil (reparse-symbol indented_block_body) [136556 136578])
                                    ("self" variable nil (reparse-symbol indented_block_body) [136585 136622]))                                  
                                :parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [135228 135232])
                                    ("graph" variable nil (reparse-symbol function_parameters) [135234 135239])
                                    ("control_inputs" variable nil (reparse-symbol function_parameters) [135241 135255]))                                  
                                :documentation "Create a new `_ControlDependenciesController`.

      A `_ControlDependenciesController` is the context manager for
      `with tf.control_dependencies()` blocks.  These normally nest,
      as described in the documentation for `control_dependencies()`.

      The `control_inputs` argument list control dependencies that must be
      added to the current set of control dependencies.  Because of
      uniquification the set can be empty even if the caller passed a list of
      ops.  The special value `None` indicates that we want to start a new
      empty set of control dependencies instead of extending the current set.

      In that case we also clear the current control flow context, which is an
      additional mechanism to add control dependencies.

      Args:
        graph: The graph that this controller is managing.
        control_inputs: List of ops to use as control inputs in addition
          to the current control dependencies.  None to indicate that
          the dependencies should be cleared.
      "
                                :constructor-flag t)
                                (reparse-symbol indented_block_body) [135215 136622])
                            ("__enter__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [136677 136681]))                                  )
                                (reparse-symbol indented_block_body) [136663 137118])
                            ("__exit__" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [137136 137140])
                                    ("unused_type" variable nil (reparse-symbol function_parameters) [137142 137153])
                                    ("unused_value" variable nil (reparse-symbol function_parameters) [137155 137167])
                                    ("unused_traceback" variable nil (reparse-symbol function_parameters) [137169 137185]))                                  )
                                (reparse-symbol indented_block_body) [137123 137419])
                            ("control_inputs" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [137492 137496]))                                  
                                :decorators 
                                  ( ("property" function (:type "decorator") nil nil))                                  )
                                (reparse-symbol indented_block_body) [137459 137533])
                            ("add_op" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [137549 137553])
                                    ("op" variable nil (reparse-symbol function_parameters) [137555 137557]))                                  )
                                (reparse-symbol indented_block_body) [137538 137591])
                            ("op_in_group" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [137612 137616])
                                    ("op" variable nil (reparse-symbol function_parameters) [137618 137620]))                                  )
                                (reparse-symbol indented_block_body) [137596 137659]))                          
                        :type "class")
                        (reparse-symbol indented_block_body) [135108 137659])
                    ("_push_control_dependencies_controller" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137704 137708])
                            ("controller" variable nil (reparse-symbol function_parameters) [137710 137720]))                          )
                        (reparse-symbol indented_block_body) [137662 137779])
                    ("_pop_control_dependencies_controller" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137823 137827])
                            ("controller" variable nil (reparse-symbol function_parameters) [137829 137839]))                          )
                        (reparse-symbol indented_block_body) [137782 137947])
                    ("_current_control_dependencies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137984 137988]))                          )
                        (reparse-symbol indented_block_body) [137950 138141])
                    ("_control_dependencies_for_inputs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138181 138185])
                            ("input_tensors" variable nil (reparse-symbol function_parameters) [138187 138200]))                          
                        :documentation "For an op that takes `input_tensors` as inputs, compute control inputs.

    The returned control dependencies should yield an execution that
    is equivalent to adding all control inputs in
    self._control_dependencies_stack to a newly created op. However,
    this function attempts to prune the returned control dependencies
    by observing that nodes created within the same `with
    control_dependencies(...):` block may have data dependencies that make
    the explicit approach redundant.

    Args:
      input_tensors: The direct data dependencies for an op to be created.

    Returns:
      A list of control inputs for the op to be created.
    ")
                        (reparse-symbol indented_block_body) [138144 139693])
                    ("_record_op_seen_by_control_dependencies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139740 139744])
                            ("op" variable nil (reparse-symbol function_parameters) [139746 139748]))                          
                        :documentation "Record that the given op depends on all registered control dependencies.

    Args:
      op: An Operation.
    ")
                        (reparse-symbol indented_block_body) [139696 139958])
                    ("control_dependencies" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139986 139990])
                            ("control_inputs" variable nil (reparse-symbol function_parameters) [139992 140006]))                          
                        :documentation "Returns a context manager that specifies control dependencies.

    Use with the `with` keyword to specify that all operations constructed
    within the context should have control dependencies on
    `control_inputs`. For example:

    ```python
    with g.control_dependencies([a, b, c]):
      # `d` and `e` will only run after `a`, `b`, and `c` have executed.
      d = ...
      e = ...
    ```

    Multiple calls to `control_dependencies()` can be nested, and in
    that case a new `Operation` will have control dependencies on the union
    of `control_inputs` from all active contexts.

    ```python
    with g.control_dependencies([a, b]):
      # Ops constructed here run after `a` and `b`.
      with g.control_dependencies([c, d]):
        # Ops constructed here run after `a`, `b`, `c`, and `d`.
    ```

    You can pass None to clear the control dependencies:

    ```python
    with g.control_dependencies([a, b]):
      # Ops constructed here run after `a` and `b`.
      with g.control_dependencies(None):
        # Ops constructed here run normally, not waiting for either `a` or `b`.
        with g.control_dependencies([c, d]):
          # Ops constructed here run after `c` and `d`, also not waiting
          # for either `a` or `b`.
    ```

    *N.B.* The control dependencies context applies *only* to ops that
    are constructed within the context. Merely using an op or tensor
    in the context does not add a control dependency. The following
    example illustrates this point:

    ```python
    # WRONG
    def my_func(pred, tensor):
      t = tf.matmul(tensor, tensor)
      with tf.control_dependencies([pred]):
        # The matmul op is created outside the context, so no control
        # dependency will be added.
        return t

    # RIGHT
    def my_func(pred, tensor):
      with tf.control_dependencies([pred]):
        # The matmul op is created in the context, so a control dependency
        # will be added.
        return tf.matmul(tensor, tensor)
    ```

    Args:
      control_inputs: A list of `Operation` or `Tensor` objects which
        must be executed or computed before running the operations
        defined in the context.  Can also be `None` to clear the control
        dependencies.

    Returns:
     A context manager that specifies control dependencies for all
     operations constructed within the context.

    Raises:
      TypeError: If `control_inputs` is not a list of `Operation` or
        `Tensor` objects.
    ")
                        (reparse-symbol indented_block_body) [139961 143362])
                    ("_attr_scope" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143455 143459])
                            ("attr_map" variable nil (reparse-symbol function_parameters) [143461 143469]))                          
                        :documentation "EXPERIMENTAL: A context manager for setting attributes on operators.

    This context manager can be used to add additional
    attributes to operators within the scope of the context.

    For example:

       with ops.Graph().as_default() as g:
         f_1 = Foo()  # No extra attributes
         with g._attr_scope({\"_a\": tf.attr_value_pb2.AttrValue(b=False)}):
           f_2 = Foo()  # Additional attribute _a=False
           with g._attr_scope({\"_a\": tf.attr_value_pb2.AttrValue(b=True)}):
             f_3 = Foo()  # Additional attribute _a=False
             with g._attr_scope({\"_a\": None}):
               f_4 = Foo()  # No additional attributes.

    Args:
      attr_map: A dictionary mapping attr name strings to
        AttrValue protocol buffers or None.

    Returns:
      A context manager that sets the kernel label to be used for one or more
      ops created in that context.

    Raises:
      TypeError: If attr_map is not a dictionary mapping
        strings to AttrValue protobufs.
    ")
                        (reparse-symbol indented_block_body) [143407 145811])
                    ("_kernel_label_map" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145952 145956])
                            ("op_to_kernel_label_map" variable nil (reparse-symbol function_parameters) [145958 145980]))                          
                        :documentation "EXPERIMENTAL: A context manager for setting kernel labels.

    This context manager can be used to select particular
    implementations of kernels within the scope of the context.

    For example:

        with ops.Graph().as_default() as g:
          f_1 = Foo()  # Uses the default registered kernel for the Foo op.
          with g.kernel_label_map({\"Foo\": \"v_2\"}):
            f_2 = Foo()  # Uses the registered kernel with label \"v_2\"
                         # for the Foo op.
            with g.kernel_label_map({\"Foo\": \"v_3\"}):
              f_3 = Foo()  # Uses the registered kernel with label \"v_3\"
                           # for the Foo op.
              with g.kernel_label_map({\"Foo\": \"\"}):
                f_4 = Foo()  # Uses the default registered kernel
                             # for the Foo op.

    Args:
      op_to_kernel_label_map: A dictionary mapping op type strings to
        kernel label strings.

    Returns:
      A context manager that sets the kernel label to be used for one or more
      ops created in that context.

    Raises:
      TypeError: If op_to_kernel_label_map is not a dictionary mapping
        strings to strings.
    ")
                        (reparse-symbol indented_block_body) [145898 148353])
                    ("gradient_override_map" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148498 148502])
                            ("op_type_map" variable nil (reparse-symbol function_parameters) [148504 148515]))                          
                        :documentation "EXPERIMENTAL: A context manager for overriding gradient functions.

    This context manager can be used to override the gradient function
    that will be used for ops within the scope of the context.

    For example:

    ```python
    @tf.RegisterGradient(\"CustomSquare\")
    def _custom_square_grad(op, grad):
      # ...

    with tf.Graph().as_default() as g:
      c = tf.constant(5.0)
      s_1 = tf.square(c)  # Uses the default gradient for tf.square.
      with g.gradient_override_map({\"Square\": \"CustomSquare\"}):
        s_2 = tf.square(s_2)  # Uses _custom_square_grad to compute the
                              # gradient of s_2.
    ```

    Args:
      op_type_map: A dictionary mapping op type strings to alternative op
        type strings.

    Returns:
      A context manager that sets the alternative op type to be used for one
      or more ops created in that context.

    Raises:
      TypeError: If `op_type_map` is not a dictionary mapping strings to
        strings.
    ")
                        (reparse-symbol indented_block_body) [148440 150703])
                    ("prevent_feeding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150768 150772])
                            ("tensor" variable nil (reparse-symbol function_parameters) [150774 150780]))                          
                        :documentation "Marks the given `tensor` as unfeedable in this graph.")
                        (reparse-symbol indented_block_body) [150748 150888])
                    ("is_feedable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150907 150911])
                            ("tensor" variable nil (reparse-symbol function_parameters) [150913 150919]))                          
                        :documentation "Returns `True` if and only if `tensor` is feedable.")
                        (reparse-symbol indented_block_body) [150891 151034])
                    ("prevent_fetching" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151058 151062])
                            ("op" variable nil (reparse-symbol function_parameters) [151064 151066]))                          
                        :documentation "Marks the given `op` as unfetchable in this graph.")
                        (reparse-symbol indented_block_body) [151037 151164])
                    ("is_fetchable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151184 151188])
                            ("tensor_or_op" variable nil (reparse-symbol function_parameters) [151190 151202]))                          
                        :documentation "Returns `True` if and only if `tensor_or_op` is fetchable.")
                        (reparse-symbol indented_block_body) [151167 151438]))                  
                :type "class")
                nil [82801 151438])
            ("device" function
               (:documentation "Wrapper for `Graph.device()` using the default graph.

  See
  @{tf.Graph.device}
  for more details.

  Args:
    device_name_or_function: The device name or function to use in
      the context.

  Returns:
    A context manager that specifies the default device to use for newly
    created ops.
  "
                :arguments 
                  ( ("device_name_or_function" variable nil (reparse-symbol function_parameters) [151573 151596]))                  )
                nil [151562 152122])
            ("container" function
               (:documentation "Wrapper for `Graph.container()` using the default graph.

  Args:
    container_name: The container string to use in the context.

  Returns:
    A context manager that specifies the default container to use for newly
    created stateful ops.
  "
                :arguments 
                  ( ("container_name" variable nil (reparse-symbol function_parameters) [152138 152152]))                  )
                nil [152124 152465])
            ("colocate_with" function (:arguments 
              ( ("op" variable nil (reparse-symbol function_parameters) [152485 152487])
                ("ignore_existing" variable nil (reparse-symbol function_parameters) [152489 152504]))              ) nil [152467 152716])
            ("control_dependencies" function
               (:documentation "Wrapper for `Graph.control_dependencies()` using the default graph.

  See @{tf.Graph.control_dependencies}
  for more details.

  Args:
    control_inputs: A list of `Operation` or `Tensor` objects which
      must be executed or computed before running the operations
      defined in the context.  Can also be `None` to clear the control
      dependencies.

  Returns:
   A context manager that specifies control dependencies for all
   operations constructed within the context.
  "
                :arguments 
                  ( ("control_inputs" variable nil (reparse-symbol function_parameters) [152743 152757]))                  )
                nil [152718 153394])
            ("_DefaultStack" type
               (:documentation "A thread-local stack of objects for providing implicit defaults."
                :superclasses ("threading.local")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [153535 153572])
                            ("self" variable nil (reparse-symbol indented_block_body) [153577 153605])
                            ("self" variable nil (reparse-symbol indented_block_body) [153610 153625]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153523 153527]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [153510 153625])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153644 153648]))                          )
                        (reparse-symbol indented_block_body) [153628 153711])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153724 153728]))                          )
                        (reparse-symbol indented_block_body) [153714 153751])
                    ("is_cleared" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153769 153773]))                          )
                        (reparse-symbol indented_block_body) [153754 153802])
                    ("enforce_nesting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153837 153841]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [153805 153877])
                    ("enforce_nesting" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153926 153930])
                            ("value" variable nil (reparse-symbol function_parameters) [153932 153937]))                          
                        :decorators 
                          ( ("enforce_nesting.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [153880 153974])
                    ("get_controller" function
                       (:parent "dummy"
                        :decorators 
                          ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154028 154032])
                            ("default" variable nil (reparse-symbol function_parameters) [154034 154041]))                          
                        :documentation "A context manager for manipulating a default stack.")
                        (reparse-symbol indented_block_body) [153977 154455]))                  
                :type "class")
                nil [153396 154455])
            ("_default_session_stack" variable nil nil [154456 154496])
            ("default_session" function
               (:documentation "Python \"with\" handler for defining a default session.

  This function provides a means of registering a session for handling
  Tensor.eval() and Operation.run() calls. It is primarily intended for use
  by session.Session, but can be used with any object that implements
  the Session.run() interface.

  Use with the \"with\" keyword to specify that Tensor.eval() and Operation.run()
  invocations within the scope of a block should be executed by a particular
  session.

  The default session applies to the current thread only, so it is always
  possible to inspect the call stack and determine the scope of a default
  session. If you create a new thread, and wish to use the default session
  in that thread, you must explicitly add a \"with ops.default_session(sess):\"
  block in that thread's function.

  Example:
    The following code examples are equivalent:

    # 1. Using the Session object directly:
    sess = ...
    c = tf.constant(5.0)
    sess.run(c)

    # 2. Using default_session():
    sess = ...
    with ops.default_session(sess):
      c = tf.constant(5.0)
      result = c.eval()

    # 3. Overriding default_session():
    sess = ...
    with ops.default_session(sess):
      c = tf.constant(5.0)
      with ops.default_session(...):
        c.eval(session=sess)

  Args:
    session: The session to be installed as the default session.

  Returns:
    A context manager for the default session.
  "
                :arguments 
                  ( ("session" variable nil (reparse-symbol function_parameters) [154555 154562]))                  )
                nil [154535 156056])
            ("get_default_session" function (:documentation "Returns the default session for the current thread.

  The returned `Session` will be the innermost session on which a
  `Session` or `Session.as_default()` context has been entered.

  NOTE: The default session is a property of the current thread. If you
  create a new thread, and wish to use the default session in that
  thread, you must explicitly add a `with sess.as_default():` in that
  thread's function.

  Returns:
    The default `Session` being used in the current thread.
  ") nil [156058 156628])
            ("_eval_using_default_session" function
               (:documentation "Uses the default session to evaluate one or more tensors.

  Args:
    tensors: A single Tensor, or a list of Tensor objects.
    feed_dict: A dictionary that maps Tensor objects (or tensor names) to lists,
      numpy ndarrays, TensorProtos, or strings.
    graph: The graph in which the tensors are defined.
    session: (Optional) A different session to use to evaluate \"tensors\".

  Returns:
    Either a single numpy ndarray if \"tensors\" is a single tensor; or a list
    of numpy ndarrays that each correspond to the respective element in
    \"tensors\".

  Raises:
    ValueError: If no default session is available; the default session
      does not have \"graph\" as its graph; or if \"session\" is specified,
      and it does not have \"graph\" as its graph.
  "
                :arguments 
                  ( ("tensors" variable nil (reparse-symbol function_parameters) [156662 156669])
                    ("feed_dict" variable nil (reparse-symbol function_parameters) [156671 156680])
                    ("graph" variable nil (reparse-symbol function_parameters) [156682 156687])
                    ("session" variable nil (reparse-symbol function_parameters) [156689 156696]))                  )
                nil [156630 158386])
            ("_run_using_default_session" function
               (:documentation "Uses the default session to run \"operation\".

  Args:
    operation: The Operation to be run.
    feed_dict: A dictionary that maps Tensor objects (or tensor names) to lists,
      numpy ndarrays, TensorProtos, or strings.
    graph: The graph in which \"operation\" is defined.
    session: (Optional) A different session to use to run \"operation\".

  Raises:
    ValueError: If no default session is available; the default session
      does not have \"graph\" as its graph; or if \"session\" is specified,
      and it does not have \"graph\" as its graph.
  "
                :arguments 
                  ( ("operation" variable nil (reparse-symbol function_parameters) [158419 158428])
                    ("feed_dict" variable nil (reparse-symbol function_parameters) [158430 158439])
                    ("graph" variable nil (reparse-symbol function_parameters) [158441 158446])
                    ("session" variable nil (reparse-symbol function_parameters) [158448 158455]))                  )
                nil [158388 159936])
            ("_DefaultGraphStack" type
               (:documentation "A thread-local stack of objects for providing an implicit default graph."
                :superclasses ("_DefaultStack")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [160124 160166])
                            ("self" variable nil (reparse-symbol indented_block_body) [160171 160204]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160112 160116]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [160099 160204])
                    ("get_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160223 160227]))                          
                        :documentation "Override that returns a global default if the stack is empty.")
                        (reparse-symbol indented_block_body) [160207 160435])
                    ("_GetGlobalDefaultGraph" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160465 160469]))                          )
                        (reparse-symbol indented_block_body) [160438 160851])
                    ("reset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160864 160868]))                          )
                        (reparse-symbol indented_block_body) [160854 160953]))                  
                :type "class")
                nil [159938 160953])
            ("_default_graph_stack" variable nil nil [160955 160998])
            ("reset_default_graph" function (:documentation "Clears the default graph stack and resets the global default graph.

  NOTE: The default graph is a property of the current thread. This
  function applies only to the current thread.  Calling this function while
  a `tf.Session` or `tf.InteractiveSession` is active will result in undefined
  behavior. Using any previously created `tf.Operation` or `tf.Tensor` objects
  after calling this function will result in undefined behavior.
  Raises:
    AssertionError: If this function is called within a nested graph.
  ") nil [161001 161844])
            ("get_default_graph" function (:documentation "Returns the default graph for the current thread.

  The returned graph will be the innermost graph on which a
  `Graph.as_default()` context has been entered, or a global default
  graph if none has been explicitly created.

  NOTE: The default graph is a property of the current thread. If you
  create a new thread, and wish to use the default graph in that
  thread, you must explicitly add a `with g.as_default():` in that
  thread's function.

  Returns:
    The default `Graph` being used in the current thread.
  ") nil [161846 162445])
            ("_assert_same_graph" function
               (:documentation "Fail if the 2 items are from different graphs.

  Args:
    original_item: Original item to check against.
    item: Item to check.

  Raises:
    ValueError: if graphs do not match.
  "
                :arguments 
                  ( ("original_item" variable nil (reparse-symbol function_parameters) [162470 162483])
                    ("item" variable nil (reparse-symbol function_parameters) [162485 162489]))                  )
                nil [162447 162880])
            ("_get_graph_from_inputs" function
               (:documentation "Returns the appropriate graph to use for the given inputs.

  This library method provides a consistent algorithm for choosing the graph
  in which an Operation should be constructed:

  1. If the default graph is being used to construct a function, we
     use the default graph.
  2. If the \"graph\" is specified explicitly, we validate that all of the inputs
     in \"op_input_list\" are compatible with that graph.
  3. Otherwise, we attempt to select a graph from the first Operation-
     or Tensor-valued input in \"op_input_list\", and validate that all other
     such inputs are in the same graph.
  4. If the graph was not specified and it could not be inferred from
     \"op_input_list\", we attempt to use the default graph.

  Args:
    op_input_list: A list of inputs to an operation, which may include `Tensor`,
      `Operation`, and other objects that may be converted to a graph element.
    graph: (Optional) The explicit graph to use.

  Raises:
    TypeError: If op_input_list is not a list or tuple, or if graph is not a
      Graph.
    ValueError: If a graph is explicitly passed and not all inputs are from it,
      or if the inputs are from multiple graphs, or we could not find a graph
      and there was no default graph.

  Returns:
    The appropriate graph to use for the given inputs.

  "
                :arguments 
                  ( ("op_input_list" variable nil (reparse-symbol function_parameters) [162909 162922])
                    ("graph" variable nil (reparse-symbol function_parameters) [162924 162929]))                  )
                nil [162882 165857])
            ("GraphKeys" type
               (:documentation "Standard names to use for graph collections.

  The standard library uses various well-known names to collect and
  retrieve values associated with a graph. For example, the
  `tf.Optimizer` subclasses default to optimizing the variables
  collected under `tf.GraphKeys.TRAINABLE_VARIABLES` if none is
  specified, but it is also possible to pass an explicit list of
  variables.

  The following standard keys are defined:

  * `GLOBAL_VARIABLES`: the default collection of `Variable` objects, shared
    across distributed environment (model variables are subset of these). See
    @{tf.global_variables}
    for more details.
    Commonly, all `TRAINABLE_VARIABLES` variables will be in `MODEL_VARIABLES`,
    and all `MODEL_VARIABLES` variables will be in `GLOBAL_VARIABLES`.
  * `LOCAL_VARIABLES`: the subset of `Variable` objects that are local to each
    machine. Usually used for temporarily variables, like counters.
    Note: use `tf.contrib.framework.local_variable` to add to this collection.
  * `MODEL_VARIABLES`: the subset of `Variable` objects that are used in the
    model for inference (feed forward). Note: use
    `tf.contrib.framework.model_variable` to add to this collection.
  * `TRAINABLE_VARIABLES`: the subset of `Variable` objects that will
    be trained by an optimizer. See
    @{tf.trainable_variables}
    for more details.
  * `SUMMARIES`: the summary `Tensor` objects that have been created in the
    graph. See
    @{tf.summary.merge_all}
    for more details.
  * `QUEUE_RUNNERS`: the `QueueRunner` objects that are used to
    produce input for a computation. See
    @{tf.train.start_queue_runners}
    for more details.
  * `MOVING_AVERAGE_VARIABLES`: the subset of `Variable` objects that will also
    keep moving averages.  See
    @{tf.moving_average_variables}
    for more details.
  * `REGULARIZATION_LOSSES`: regularization losses collected during graph
    construction.

  The following standard keys are _defined_, but their collections are **not**
  automatically populated as many of the others are:

  * `WEIGHTS`
  * `BIASES`
  * `ACTIVATIONS`
  "
                :superclasses ("object")
                :members 
                  ( ("GLOBAL_VARIABLES" variable nil (reparse-symbol indented_block_body) [168140 168170])
                    ("LOCAL_VARIABLES" variable nil (reparse-symbol indented_block_body) [168270 168305])
                    ("MODEL_VARIABLES" variable nil (reparse-symbol indented_block_body) [168362 168397])
                    ("TRAINABLE_VARIABLES" variable nil (reparse-symbol indented_block_body) [168480 168523])
                    ("SUMMARIES" variable nil (reparse-symbol indented_block_body) [168556 168579])
                    ("QUEUE_RUNNERS" variable nil (reparse-symbol indented_block_body) [168615 168646])
                    ("TABLE_INITIALIZERS" variable nil (reparse-symbol indented_block_body) [168688 168728])
                    ("ASSET_FILEPATHS" variable nil (reparse-symbol indented_block_body) [168836 168871])
                    ("MOVING_AVERAGE_VARIABLES" variable nil (reparse-symbol indented_block_body) [168937 168990])
                    ("REGULARIZATION_LOSSES" variable nil (reparse-symbol indented_block_body) [169057 169104])
                    ("CONCATENATED_VARIABLES" variable nil (reparse-symbol indented_block_body) [169158 169207])
                    ("SAVERS" variable nil (reparse-symbol indented_block_body) [169237 169254])
                    ("WEIGHTS" variable nil (reparse-symbol indented_block_body) [169284 169303])
                    ("BIASES" variable nil (reparse-symbol indented_block_body) [169332 169349])
                    ("ACTIVATIONS" variable nil (reparse-symbol indented_block_body) [169383 169410])
                    ("UPDATE_OPS" variable nil (reparse-symbol indented_block_body) [169443 169468])
                    ("LOSSES" variable nil (reparse-symbol indented_block_body) [169497 169514])
                    ("SAVEABLE_OBJECTS" variable nil (reparse-symbol indented_block_body) [169597 169634])
                    ("RESOURCES" variable nil (reparse-symbol indented_block_body) [169746 169769])
                    ("LOCAL_RESOURCES" variable nil (reparse-symbol indented_block_body) [169882 169917])
                    ("TRAINABLE_RESOURCE_VARIABLES" variable nil (reparse-symbol indented_block_body) [169960 170021])
                    ("INIT_OP" variable nil (reparse-symbol indented_block_body) [170058 170077])
                    ("LOCAL_INIT_OP" variable nil (reparse-symbol indented_block_body) [170080 170111])
                    ("READY_OP" variable nil (reparse-symbol indented_block_body) [170114 170135])
                    ("READY_FOR_LOCAL_INIT_OP" variable nil (reparse-symbol indented_block_body) [170138 170189])
                    ("SUMMARY_OP" variable nil (reparse-symbol indented_block_body) [170192 170217])
                    ("GLOBAL_STEP" variable nil (reparse-symbol indented_block_body) [170220 170247])
                    ("EVAL_STEP" variable nil (reparse-symbol indented_block_body) [170341 170364])
                    ("TRAIN_OP" variable nil (reparse-symbol indented_block_body) [170367 170388])
                    ("COND_CONTEXT" variable nil (reparse-symbol indented_block_body) [170426 170455])
                    ("WHILE_CONTEXT" variable nil (reparse-symbol indented_block_body) [170458 170489])
                    ("_VARIABLE_COLLECTIONS" variable nil (reparse-symbol indented_block_body) [170551 170775])
                    ("_STREAMING_MODEL_PORTS" variable nil (reparse-symbol indented_block_body) [170860 170908])
                    ("RANK_SERVICE_INPUT" variable nil (reparse-symbol indented_block_body) [170948 170991])
                    ("RANK_SERVICE_OUTPUT" variable nil (reparse-symbol indented_block_body) [170994 171039])
                    ("RANK_SERVICE_EMBEDDING" variable nil (reparse-symbol indented_block_body) [171042 171093])
                    ("RANK_SERVICE_INPUT_SRC" variable nil (reparse-symbol indented_block_body) [171096 171147])
                    ("RANK_SERVICE_REPLACE_OP" variable nil (reparse-symbol indented_block_body) [171150 171200])
                    ("VARIABLES" function
                       (:decorators 
                          ( ("decorator_utils.classproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [171251 171254]))                          )
                        (reparse-symbol indented_block_body) [171204 171516]))                  
                :type "class")
                nil [165859 171516])
            ("add_to_collection" function
               (:documentation "Wrapper for `Graph.add_to_collection()` using the default graph.

  See @{tf.Graph.add_to_collection}
  for more details.

  Args:
    name: The key for the collection. For example, the `GraphKeys` class
      contains many standard names for collections.
    value: The value to add to the collection.
  "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [171540 171544])
                    ("value" variable nil (reparse-symbol function_parameters) [171546 171551]))                  )
                nil [171518 171921])
            ("add_to_collections" function
               (:documentation "Wrapper for `Graph.add_to_collections()` using the default graph.

  See @{tf.Graph.add_to_collections}
  for more details.

  Args:
    names: The key for the collections. The `GraphKeys` class
      contains many standard names for collections.
    value: The value to add to the collections.
  "
                :arguments 
                  ( ("names" variable nil (reparse-symbol function_parameters) [171946 171951])
                    ("value" variable nil (reparse-symbol function_parameters) [171953 171958]))                  )
                nil [171923 172322])
            ("get_collection_ref" function
               (:documentation "Wrapper for `Graph.get_collection_ref()` using the default graph.

  See @{tf.Graph.get_collection_ref}
  for more details.

  Args:
    key: The key for the collection. For example, the `GraphKeys` class
      contains many standard names for collections.

  Returns:
    The list of values in the collection with the given `name`, or an empty
    list if no value has been added to that collection.  Note that this returns
    the collection list itself, which can be modified in place to change the
    collection.
  "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [172347 172350]))                  )
                nil [172324 172935])
            ("get_collection" function
               (:documentation "Wrapper for `Graph.get_collection()` using the default graph.

  See @{tf.Graph.get_collection}
  for more details.

  Args:
    key: The key for the collection. For example, the `GraphKeys` class
      contains many standard names for collections.
    scope: (Optional.) If supplied, the resulting list is filtered to include
      only items whose `name` attribute matches using `re.match`. Items
      without a `name` attribute are never returned if a scope is supplied and
      the choice or `re.match` means that a `scope` without special tokens
      filters by prefix.

  Returns:
    The list of values in the collection with the given `name`, or
    an empty list if no value has been added to that collection. The
    list contains the values in the order under which they were
    collected.
  "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [172956 172959])
                    ("scope" variable nil (reparse-symbol function_parameters) [172961 172966]))                  )
                nil [172937 173846])
            ("get_all_collection_keys" function (:documentation "Returns a list of collections used in the default graph.") nil [173848 173999])
            ("name_scope" type
               (:documentation "A context manager for use when defining a Python op.

  This context manager validates that the given `values` are from the
  same graph, makes that graph the default graph, and pushes a
  name scope in that graph (see
  @{tf.Graph.name_scope}
  for more details on that).

  For example, to define a new Python op called `my_op`:

  ```python
  def my_op(a, b, c, name=None):
    with tf.name_scope(name, \"MyOp\", [a, b, c]) as scope:
      a = tf.convert_to_tensor(a, name=\"a\")
      b = tf.convert_to_tensor(b, name=\"b\")
      c = tf.convert_to_tensor(c, name=\"c\")
      # Define some computation that uses `a`, `b`, and `c`.
      return foo_op(..., name=scope)
  ```
  "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize the context manager.

    Args:
      name: The name argument that is passed to the op function.
      default_name: The default name to use if the `name` argument is `None`.
      values: The list of `Tensor` arguments that are passed to the op function.
    \"\"\"" code nil (reparse-symbol indented_block_body) [174981 175258])
                            ("name" code nil (reparse-symbol indented_block_body) [175310 175314])
                            ("self" variable nil (reparse-symbol indented_block_body) [175319 175352])
                            ("self" variable nil (reparse-symbol indented_block_body) [175357 175378])
                            ("self" variable nil (reparse-symbol indented_block_body) [175383 175412])
                            ("self" variable nil (reparse-symbol indented_block_body) [175417 175464]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174931 174935])
                            ("name" variable nil (reparse-symbol function_parameters) [174937 174941])
                            ("default_name" variable nil (reparse-symbol function_parameters) [174943 174955])
                            ("values" variable nil (reparse-symbol function_parameters) [174962 174968]))                          
                        :documentation "Initialize the context manager.

    Args:
      name: The name argument that is passed to the op function.
      default_name: The default name to use if the `name` argument is `None`.
      values: The list of `Tensor` arguments that are passed to the op function.
    "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [174918 175464])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175481 175485]))                          
                        :documentation "Start the scope block.

    Returns:
      The scope name.

    Raises:
      ValueError: if neither `name` nor `default_name` is provided
        but `values` are.
    ")
                        (reparse-symbol indented_block_body) [175467 176667])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176683 176687])
                            ("type_arg" variable nil (reparse-symbol function_parameters) [176689 176697])
                            ("value_arg" variable nil (reparse-symbol function_parameters) [176699 176708])
                            ("traceback_arg" variable nil (reparse-symbol function_parameters) [176710 176723]))                          )
                        (reparse-symbol indented_block_body) [176670 177003]))                  
                :type "class")
                nil [174175 177003])
            ("strip_name_scope" function
               (:documentation "Removes name scope from a name.

  Args:
    name: A `string` name.
    export_scope: Optional `string`. Name scope to remove.

  Returns:
    Name with name scope removed, or the original name if export_scope
    is None.
  "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [177026 177030])
                    ("export_scope" variable nil (reparse-symbol function_parameters) [177032 177044]))                  )
                nil [177005 177711])
            ("prepend_name_scope" function
               (:documentation "Prepends name scope to a name.

  Args:
    name: A `string` name.
    import_scope: Optional `string`. Name scope to add.

  Returns:
    Name with name scope added, or the original name if import_scope
    is None.
  "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [177736 177740])
                    ("import_scope" variable nil (reparse-symbol function_parameters) [177742 177754]))                  )
                nil [177713 178331])
            ("op_scope" function
               (:documentation "DEPRECATED. Same as name_scope above, just different argument order."
                :arguments 
                  ( ("values" variable nil (reparse-symbol function_parameters) [178454 178460])
                    ("name" variable nil (reparse-symbol function_parameters) [178462 178466])
                    ("default_name" variable nil (reparse-symbol function_parameters) [178468 178480]))                  
                :decorators 
                  ( ("tf_contextlib.contextmanager" function (:type "decorator") nil nil))                  )
                nil [178411 178794])
            ("_proto_function_registry" variable nil nil [178796 178859])
            ("register_proto_function" function
               (:documentation "Registers `to_proto` and `from_proto` functions for collection_name.

  `to_proto` function converts a Python object to the corresponding protocol
  buffer, and returns the protocol buffer.

  `from_proto` function converts protocol buffer into a Python object, and
  returns the object..

  Args:
    collection_name: Name of the collection.
    proto_type: Protobuf type, such as `saver_pb2.SaverDef`,
      `variable_pb2.VariableDef`, `queue_runner_pb2.QueueRunnerDef`..
    to_proto: Function that implements Python object to protobuf conversion.
    from_proto: Function that implements protobuf to Python object conversion.
  "
                :arguments 
                  ( ("collection_name" variable nil (reparse-symbol function_parameters) [178890 178905])
                    ("proto_type" variable nil (reparse-symbol function_parameters) [178935 178945])
                    ("to_proto" variable nil (reparse-symbol function_parameters) [178980 178988])
                    ("from_proto" variable nil (reparse-symbol function_parameters) [179023 179033]))                  )
                nil [178862 179998])
            ("get_collection_proto_type" function
               (:documentation "Returns the proto_type for collection_name."
                :arguments 
                  ( ("collection_name" variable nil (reparse-symbol function_parameters) [180030 180045]))                  )
                nil [180000 180208])
            ("get_to_proto_function" function
               (:documentation "Returns the to_proto function for collection_name."
                :arguments 
                  ( ("collection_name" variable nil (reparse-symbol function_parameters) [180236 180251]))                  )
                nil [180210 180421])
            ("get_from_proto_function" function
               (:documentation "Returns the from_proto function for collection_name."
                :arguments 
                  ( ("collection_name" variable nil (reparse-symbol function_parameters) [180451 180466]))                  )
                nil [180423 180638])
            ("_assert_collection_is_ok" function (:arguments 
              ( ("collection_name" variable nil (reparse-symbol function_parameters) [180669 180684]))              ) nil [180640 180937])
            ("_operation_conversion_error" function
               (:documentation "Produce a nice error if someone converts an Operation to a Tensor."
                :arguments 
                  ( ("op" variable nil (reparse-symbol function_parameters) [180971 180973])
                    ("dtype" variable nil (reparse-symbol function_parameters) [180975 180980])
                    ("name" variable nil (reparse-symbol function_parameters) [180987 180991])
                    ("as_ref" variable nil (reparse-symbol function_parameters) [180998 181004]))                  )
                nil [180939 181306])
            ("register_tensor_conversion_function" code nil nil [181308 181383]))          
      :file "ops.py"
      :pointmax 181384
      :fsize 181383
      :lastmodtime '(23290 32134 268833 920000)
      :unmatched-syntax nil))
  :file "!home!sdd!sea_platform!basic_ops_compile!tensorflow!tensorflow!python!framework!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
