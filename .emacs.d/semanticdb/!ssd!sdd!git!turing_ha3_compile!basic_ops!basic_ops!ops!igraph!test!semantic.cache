;; Object test/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "test/"
  :tables
  (list
    (semanticdb-table "IGraphFieldExtractorTest.cpp"
      :major-mode 'c++-mode
      :tags 
        '( ("unittest/unittest.h" include (:system-flag t) nil [1 31])
            ("basic_ops/ops/igraph/IGraphFieldExtractor.h" include nil nil [32 86])
            ("basic_ops/ops/igraph/test/FakeIGraphResult.h" include nil nil [87 142])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [144 164])
            ("testing" variable (:type "int") nil [183 191])
            ("autil" using (:type ("autil" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [192 214])
            ("tensorflow" using (:type ("tensorflow" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [215 242])
            ("igraph::client_search" using (:type ("igraph::client_search" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [243 281])
            ("suez" type
               (:members 
                  ( ("turing" type
                       (:members 
                          ( ("IGraphFieldExtractorTest" type
                               (:superclasses 
                                  ( ("TESTBASE" type
                                       (:protection "public"
                                        :type "class")
                                        nil nil))                                  
                                :type "class")
                                (reparse-symbol namespacesubparts) [320 372])
                            ("EXTRACT_SINGLE_VALUE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [382 402])
                            ("ASSERT_INT_RESULT" variable (:constant-flag t) (reparse-symbol namespacesubparts) [850 867])
                            ("CHECK_SINGLE_VALUE_INT" variable (:constant-flag t) (reparse-symbol namespacesubparts) [965 987])
                            ("CHECK_SINGLE_VALUE_UINT" variable (:constant-flag t) (reparse-symbol namespacesubparts) [1357 1380])
                            ("CHECK_SINGLE_VALUE_DOUBLE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [1754 1779])
                            ("TEST_F" function
                               (:arguments 
                                  ( ("" variable (:type ("IGraphFieldExtractorTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2800 2825])
                                    ("" variable (:type ("testSingleValue" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2826 2842]))                                  
                                :type "int")
                                (reparse-symbol namespacesubparts) [2793 3471])
                            ("CHECK_MULTI_VALUE" variable (:constant-flag t) (reparse-symbol namespacesubparts) [3481 3498])
                            ("TEST_F" function
                               (:arguments 
                                  ( ("" variable (:type ("IGraphFieldExtractorTest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5367 5392])
                                    ("" variable (:type ("testMultiValue" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5393 5408]))                                  
                                :type "int")
                                (reparse-symbol namespacesubparts) [5360 5777]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [300 5779]))                  
                :type "namespace")
                nil [283 5802]))          
      :file "IGraphFieldExtractorTest.cpp"
      :pointmax 5822
      :fsize 5821
      :lastmodtime '(23386 39080 538131 613000)
      :unmatched-syntax '((thing 182 . 183) (thing 165 . 170))
      :lexical-table 
        '(("CHECK_SINGLE_VALUE_UINT" (spp-arg-list ("dtType") 1380 . 1388) . ((semantic-list "{                                                                       \\
        FakeResultPtr result(FakeResult::createResult(\"f1:uint\", \"1#2#3\")); \\
        EXTRACT_SINGLE_VALUE(dtType, result);                               \\
        ASSERT_INT_RESULT();                                                \\
    }" 1431 . 1744)))
          ("CHECK_SINGLE_VALUE_DOUBLE" (spp-arg-list ("dtType") 1779 . 1787) . ((semantic-list "{                                                                         \\
        FakeResultPtr result(FakeResult::createResult(\"f1:double\", \"1#2#3\")); \\
        EXTRACT_SINGLE_VALUE(dtType, result);                                 \\
        if (dtType == DT_FLOAT) {                                             \\
            ASSERT_FLOAT_EQ(1.0, f(0));                                       \\
            ASSERT_FLOAT_EQ(2.0, f(1));                                       \\
            ASSERT_FLOAT_EQ(3.0, f(2));                                       \\
        } else if (dtType == DT_DOUBLE) {                                     \\
            ASSERT_DOUBLE_EQ(1.0, f(0));                                      \\
            ASSERT_DOUBLE_EQ(2.0, f(1));                                      \\
            ASSERT_DOUBLE_EQ(3.0, f(2));                                      \\
        }                                                                     \\
    }" 1830 . 2791)))
          ("CHECK_SINGLE_VALUE_INT" (spp-arg-list ("dtType") 987 . 995) . ((semantic-list "{                                                                      \\
        FakeResultPtr result(FakeResult::createResult(\"f1:int\", \"1#2#3\")); \\
        EXTRACT_SINGLE_VALUE(dtType, result);                              \\
        ASSERT_INT_RESULT();                                               \\
    }" 1038 . 1347)))
          ("ASSERT_INT_RESULT" (spp-arg-list nil 867 . 869) . 
              ((symbol "ASSERT_EQ" 876 . 885) (semantic-list "(1, f(0))" 885 . 894) (punctuation ";" 894 . 895) (symbol "ASSERT_EQ" 906 . 915) (semantic-list "(2, f(1))" 915 . 924) (punctuation ";" 924 . 925) (symbol "ASSERT_EQ" 936 . 945) (semantic-list "(3, f(2))" 945 . 954) (punctuation ";" 954 . 955)))
          ("EXTRACT_SINGLE_VALUE" (spp-arg-list ("dtType" "result") 402 . 418) . 
              ((symbol "Tensor" 464 . 470) (symbol "tensor" 471 . 477) (semantic-list "(dtType, TensorShape({3}))" 477 . 503) (punctuation ";" 503 . 504) (TYPEDEF "typedef" 550 . 557) (symbol "EnumToDataType" 558 . 572) (punctuation "<" 572 . 573) (symbol "dtType" 573 . 579) (punctuation ">" 579 . 580) (punctuation ":" 580 . 581) (punctuation ":" 581 . 582) (symbol "Type" 582 . 586) (symbol "CppType" 587 . 594) (punctuation ";" 594 . 595) (symbol "IGraphFieldExtractorTyped" 636 . 661) (punctuation "<" 661 . 662) (symbol "CppType" 662 . 669) (punctuation ">" 669 . 670) (symbol "extractor" 671 . 680) (punctuation ";" 680 . 681) (symbol "ASSERT_TRUE" 722 . 733) (semantic-list "(extractor.extractFieldSingleToTensor(result.get(), \"f1\", &tensor))" 733 . 800) (punctuation ";" 800 . 801) (symbol "auto" 808 . 812) (symbol "f" 813 . 814) (punctuation "=" 815 . 816) (symbol "tensor" 817 . 823) (punctuation "." 823 . 824) (symbol "flat" 824 . 828) (punctuation "<" 828 . 829) (symbol "CppType" 829 . 836) (punctuation ">" 836 . 837) (semantic-list "()" 837 . 839) (punctuation ";" 839 . 840)))
          ("CHECK_MULTI_VALUE" (spp-arg-list ("ft" "vt") 3498 . 3506) . ((semantic-list "{                                                                                   \\
        FakeResultPtr result(FakeResult::createResult(\"f1:\" #ft, \"1,2,3#4,5,6#7,8,9\")); \\
        Tensor tensor(DT_VARIANT, TensorShape({}));                                     \\
        IGraphFieldExtractorTyped<vt> extractor;                                        \\
        ASSERT_TRUE(extractor.extractFieldMultiToTensor(result.get(), \"f1\", &tensor));  \\
        const Variant &v = tensor.scalar<Variant>()();                                  \\
        const MultiValueVariant *value = v.get<MultiValueVariant>();                    \\
        ASSERT_TRUE(value != NULL);                                                     \\
        for (int i = 0; i < 3; i++) {                                                   \\
            auto mv = value->get<typename TfType2ExprType<vt>::type>(i);                \\
            ASSERT_EQ((size_t)3, mv->size());                                           \\
            for (int j = 0; j < 3; j++) {                                               \\
                if (#ft == string(\"double\")) {                                          \\
                    ASSERT_DOUBLE_EQ((double)(j + 1 + i * 3), (double)((*mv)[j]));      \\
                } else {                                                                \\
                    ASSERT_EQ(j + 1 + i * 3, (*mv)[j]);                                 \\
                }                                                                       \\
            }                                                                           \\
        }                                                                               \\
    }" 3567 . 5278)))
          )
)
    (semanticdb-table "FakeIGraphResult.h"
      :file "FakeIGraphResult.h"
      :fsize 6846
      :lastmodtime '(23376 2088 903624 535000)))
  :file "!ssd!sdd!git!turing_ha3_compile!basic_ops!basic_ops!ops!igraph!test!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
